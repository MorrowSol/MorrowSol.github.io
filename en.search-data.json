{"/about/":{"data":{"":"空的"},"title":"_index"},"/blog/git/":{"data":{"":"这篇文章提供了git的基本命令和git工作流程。","git命令#git命令":"# 查看大小 git count-objects -vH # 清理无效文件 git gc --prune=now ","git安装#git安装":"sudo pacman -S git ","git工作流程#git工作流程":"git远程代码 git clone 地址 git checkout -b xxx（切换至新分支xxx） 修改或添加代码 git diff 查看自己对代码做出的改变 git add 上传更新后的代码至暂存区 git commit 可以将暂存区里更新后的代码更新到本地git 提交新分支至远程 接下来的比较重要，上面的只是在本地提交，并未与git仓库交互\n之后我们需要提交自己的代码至远程仓库master分支，会出现两种情况\nmaster分支是否改变，如果改变和你的改变冲突，需要做处理\ngit checkout main 切换回main分支 git pull origin master(main) 将远端修改过的代码再更新到本地 git checkout xxx 回到xxx分支 git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容 （中途可能会出现，rebase conflict —–》手动选择保留哪段代码） git push origin xxx 把rebase后并且更新过的代码再push到远端github上 这时候你push上去了一个新分支xxx,一般来说不直接对master分支提交，而是创建request请求，需要把当前的xxx分支合并到master分支，是否接收该分支由管理员决定\n管理员合并请求选项 squash and merge 远端完成更新后 git branch -d xxx 删除本地的git分支（可选） git pull origin master 再把远端的最新代码拉至本地 从add后重复操作 ","vscode插件#vscode插件":" GitHub Pull Requests and Issues Git Graph "},"title":"git"},"/blog/hugoblog%E6%90%AD%E5%BB%BA/":{"data":{"":"在Archlinux系统搭建hugo博客，考虑到需要文档和博客的要求，最终使用Hextra主题\nhugo主页：https://gohugo.io/\n主题：https://github.com/imfing/hextra","主题配置#主题配置":"菜单栏 顶部的菜单栏需要在配置文件中设置\n基本上就是Documentation，blog加about\n具体格式\nname：显示的名称\npageRef：这里就是文档的实际路径，如/docs\n或url连接\nweight：位置\nparams：参数\n​\ticon：图标\n​\ttype：类型\n基本不需要动了\nmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 参数 params: # 主题参数 theme: # light | dark | system default: system # 主题颜色 displayToggle: true\t# 显示主题切换按钮 # 页面宽度 page: # full (100%), wide (90rem), normal (1280px) width: wide # 搜索设置 search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content # 这个就不能都搜吗 搜索排除，在文件Front matter设置\ntitle: Configuration excludeSearch: true ","依赖要求#依赖要求":" Hugo Git Go 一键安装\nsudo pacman -S hugo git go ","侧边栏#侧边栏":"菜单的侧边栏 左边的目录栏，好像只有是type：docs才生效\ndocs文件夹里的默认是docs\nmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 默认开启，如要关闭需要在文件开头Front matter设置\ntitle: Configuration sidebar: exclude: true 右侧边栏 就是目录\n目录默认开启，需要关闭同样在文件中Front matter设置\ntitle: Configuration toc: false ","写博客#写博客":"创建文件，hugo使用以下命令创建文件，创建的文件带有默认的Front matter\nhugo new content/_index.md hugo new content/docs/_index.md Front matter Front matter支持多种格式，toml,yaml,json,org\n这里使用yaml，例：\n注意需要严格按照格式，否则会报错：后有空格\ncategories: - Development - VIM date: \"2012-04-06\" description: spf13-vim is a cross platform distribution of vim plugins and resources for Vim. slug: spf13-vim-3-0-release-and-new-website tags: - .vimrc - plugins - spf13-vim - vim title: spf13-vim 3.0 release and new website 修改默认Front matter\n在默认生成的archetypes的default.md里\n常用参数\ntitle：","安装流程#安装流程":"创建hugo博客 这个主题使用yaml配置文件，使用toml的话还得改下格式\nhugo new site my-site --format=yaml 通过hugo mod安装 # initialize hugo module cd my-site hugo mod init github.com/username/my-site # add Hextra theme hugo mod get github.com/imfing/hextra 配置文件中启用\nmodule: imports: - path: github.com/imfing/hextra 通过git submodule安装 git init git submodule add https://github.com/imfing/hextra.git themes/hextra theme: hextra 启动hugo 现在没有页面\nhugo server --buildDrafts --disableFastRender ","文件目录结构#文件目录结构":"content ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/\n也就是说在content目录中可以任意创建目录，之后制定路径即可，不过通常使用docs和blog这两个目录\n有两种布局docs和blog，默认docs文件夹下为docs布局\ntitle: My Docs cascade: type: docs docs 这是一个文档格式的目录，每个目录都有一个_index.md作为首页\n其中的目录会作为文档中的目录项，如图 现在无法截图\nblog 同样的_index.md文件\n每篇博客一个md文件"},"title":"hugoblog搭建"},"/blog/hyprland%E8%BD%AF%E4%BB%B6/":{"data":{"":"hyprland上的基本软件使用，包括必须安装的软件、桌面环境软件以及一些软件ui的更改","dm#dm":"选择sddm，安装pacman即可\n主题：直接搜sddm theme\n我选的是rating榜第一的 sugar candy https://store.kde.org/s/KDE%20Store/p/1312658\n# 依赖 sudo pacman -S --needed sddm qt5‑graphicaleffects qt5‑quickcontrols2 qt5‑svg 下载安装包，解压到/usr/share/sddm/themes目录下，在conf中启用即可\nsudo tar ‑xzvf ~/Downloads/sugar‑candy.tar.gz ‑C /usr/share/sddm/themes 测试（预览）主题\nsddm-greeter --test-mode --theme /usr/share/sddm/themes/sugar‑candy sddm配置文件有三个地方存放，默认在/usr/lib/sddm/sddm.conf.d\n如果我们改配置的话自己创建新的配置文件\n配置文件优先级，下面的高\n/usr/lib/sddm/sddm.conf.d /etc/sddm.conf.d /etc/sddm.conf 我用的最后一个，复制一份配置\nsudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf 更改主题，将theme改为sugar-candy，注意没有空格，主题名和文件夹名对应\n[Theme] Current=sugar-candy 重启即可\n我的两个屏幕分别是2560x1440的外接显示器和2880x1800的笔记本内屏，两个屏幕显示均没有问题，只是用户名的字体大小有点小，在主题的Components/Input.qml中 TextField字段 id：username中加入font.pointSize: root.font.pointSize * 1","ssh工具#ssh工具":"finalshell: 我的不能传文件\nfilezilla","status-bar#status bar":"waybar","ui调整#ui调整":"firefox wayland现在已经默认开启了，没发现其他bug，这里主要是更改ui主题\nfirefox与其他浏览器不同的是可以更改ui设置，不是firefox扩展那的主题，只是颜色改变\n参考 定制指南，应用 userChrome.css，要先在 about:config 开启 toolkit.legacyUserProfileCustomizations.stylesheets。 然后进入 about:support，打开配置文件夹，新建 chrome 目录\n主题store：https://trickypr.github.io/FirefoxCSS-Store.github.io/\n把主题的css文件复制到chrome文件夹下，重启即可\nwofi .config/wofi\nconfig style.css nwg-bar .config/nwg-bar\nbar.json style.css swaylock 换swaylock-effects\nhttps://github.com/mortie/swaylock-effects\nmako .config/mako\nconfig ","下载#下载":"qbittorrent","剪贴板#剪贴板":"安装：cliphist\nsudo pacman -S cliphist 配置文件中启用：\nexec-once = wl-paste --watch cliphist store ","取色器#取色器":"hyprpicker","图片查看#图片查看":"imv   ctrl+r旋转","声音#声音":"linux内核默认有alsa模块\nalsa-firmware包 软件包包含了某些声卡（如创新SB0400 Audigy2）可能需要的固件。\n一些较新型号的笔记本电脑（2019年底/2021）需要sof-firmware包 和 alsa-ucm-conf包，它们使用 Sound Open Firmware 提供的固件实现驱动\n安装后两个：\nsudo pacman -S sof-firmware alsa-ucm-conf ui控制声音：\n安装PulseAudio：\nsudo pacman -S pulseaudio ui前端：\nsudo pacman -S pavucontrol ","安装#安装":"alsa-utils apifox / archlinuxcn-keyring base base-devel blueman bluetuith-bin / bluez bluez-utils btop clash clash-for-windows-bin / cliphist discord_arch_electron / docker downgrade efibootmgr fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-pinyin-zhwiki fd filezilla firefox gdb git go google-chrome / grim grub hugo hyprland hyprpaper-git hyprpicker / imv intel-gpu-tools intel-media-driver intel-ucode kitty lazygit libtiff5 / light linux linux-firmware linux-headers linuxqq / mako man-db man-pages mpv nano nemo neofetch neovim net-tools netease-cloud-music / network-manager-applet networkmanager noto-fonts-cjk noto-fonts-emoji ntfs-3g nwg-bar obs-studio openssh os-prober pamixer paru pavucontrol pipewire polkit-kde-agent protobuf pulseaudio qbittorrent qt5-graphicaleffects qt5-quickcontrols2 qt5-wayland qtcreator ranger ripgrep rofi-lbonn-wayland-git / sddm slurp snapd / sof-firmware swappy swayidle swaylock-effects-git / tlp tlpui-git/ tree ttf-jetbrains-mono-nerd ttf-wps-fonts / typora-free / unzip vim virtualbox virtualbox-host-dkms visual-studio-code-bin / vulkan-intel waybar-hyprland / wget wireplumber wofi wps-office-cn / wps-office-mui-zh-cn / xdg-desktop-portal-hyprland-git xorg-xeyes zotero-bin zsh pacman + archcn源 系统组件 sudo pacman -S alsa-utils archlinuxcn-keyring base base-devel blueman bluez bluez-utils btop cliphist efibootmgr fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-pinyin-zhwiki firefox gdb git grim grub hyprland hyprpaper intel-media-driver intel-ucode kitty light linux linux-firmware linux-headers mako man-db man-pages nano nemo neofetch net-tools network-manager-applet networkmanager noto-fonts-cjk noto-fonts-emoji ntfs-3g nwg-bar openssh os-prober pamixer paru pavucontrol pipewire polkit-kde-agent protobuf pulseaudio qt5-graphicaleffects qt5-quickcontrols2 qt5-wayland ranger sddm slurp sof-firmware swappy swayidle swaylock-effects tlp tree ttf-jetbrains-mono-nerd unzip vim vulkan-intel wget wireplumber wofi xdg-desktop-portal-hyprland-git zsh 其他软件 sudo pacman -S clash downgrade fd filezilla hugo imv intel-gpu-tools lazygit mpv neovim obs-studio qbittorrent qtcreator ripgrep xorg-xeyes zotero-bin aur包 paru -S apifox-bin bluetuith-bin clash-for-windows-bin discord_arch_electron hyprpicker linuxqq netease-cloud-music swaylock-effects-git tlpui-git ttf-wps-fonts typora-free visual-studio-code-bin waybar-hyprland wps-office-cn wps-office-mui-zh-cn ","屏幕录制#屏幕录制":"obs","总览#总览":" 终端 ui界面 dm tty sddm wifi nmtui nm-applet 蓝牙 bluetuith blueman-applet 输入法 - fcitx5 剪贴板 - - 声音 - pavucontrol 截图 grim 音乐播放器 mpd+ncmpcpp 网易云, ","截图#截图":"目前wayland的截图还不太行，好用的Flameshot不能用，只能用grim+slurp+swappy的组合\ngrim -g \"`slurp`\" - | swappy -f - 可以在配置文件中绑定到什么键上\nflameshot\n在所有屏幕比例都是1的情况下可用，多个屏比例不同不行\nparu flameshot-git ","文件管理器#文件管理器":"nemo,thunar,ranger","电源菜单#电源菜单":"wlogout,nwgbar","目前遇到的问题#目前遇到的问题":" 有的时候鼠标指针不会变，一直是默认的，重新移到其他窗口在移回来可以解决 ","程序启动器#程序启动器":"rofi,wofi","网络#网络":"使用Networkmanager即可，安装系统应该安装了\n系统托盘安装：\nsudo pacman -S nm-applet 配置文件中启用 ：\nexec-once = nm-applet 终端中ui：nmtui\n命令行就算了","蓝牙#蓝牙":"安装并启动bluez和bluez-uitls\nsudo pacman -S bluez bluez-utils sudo systemctl enable bluetooth.service sudo systemctl start bluetooth.service 系统托盘安装：\nsudo pacman -S blueman 配置文件中启用 ：\nexec-once = blueman-applet 这个终端中的ui：bluetuith不太好用","视频播放#视频播放":"mpv","输入法#输入法":"安装：fcitx5\nsudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-zhwiki (词库) 在环境变量中添加：\nsudo nano /etc/environment GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus 配置文件中启用：\nexec-once = fcitx5 -d ","通知#通知":"mako,dunst都可以","锁屏#锁屏":"swaylock"},"title":"Hyprland软件"},"/blog/neovim/":{"data":{"":"neovim的配置, 使用lazy.vim的包管理器,使用以模块为单位的文件配置\n我的配置文件: https://github.com/MorrowSol/nvim","code#code":"这里单独介绍有助于写代码相关的插件\ncomment https://github.com/numToStr/Comment.nvim\n加注释\nreturn { \"numToStr/Comment.nvim\", lazy = false, config = true, } gc单行注释\ngb多行注释\nconform https://github.com/stevearc/conform.nvim\n格式化,其实在lsp里被我注释的就是原生的fomatt接口,他是调用的lsp,也就是clangd的\n-- vim.keymap.set(\"n\", \"\u003cspace\u003ef\", function() -- vim.lsp.buf.format({ async = true }) -- end, opts) 我们这里使用clang-format作为fomatter,可以自定义,在mason安装\nreturn { \"stevearc/conform.nvim\", opts = { formatters_by_ft = { lua = { \"stylua\" }, cpp = { \"clang_format\" }, }, format_on_save = { timeout_ms = 500, }, }, config = function(_, opts) require(\"conform.formatters.clang_format\").args = { \"--style={BasedOnStyle: Google, IndentWidth: 4}\", } require(\"conform\").setup(opts) end, } 这里注意在自定义参数是 –style=后不需要用\"“或’‘把大括号扩起来,会报错,和官方的不太一样\n其他的自定义不如使用.clang-format文件见官网和conform设置\nhttps://clang.llvm.org/docs/ClangFormat.html\nmini https://github.com/echasnovski/mini.nvim\n这是一系列的nvim插件库,我这里用了几个\n这个可以提示括号的范围\nmini.pairs: 括号成对\nmini.surround: 加括号\ngitsigns 可以提示git\ntrouble 这个插件配合lsp使用,可以显示报错\ncoderunnner 和vscode上的差不多,不过默认提供的变量不多,不过可以通过shell获取\n我的需求\n指定任意file位置,生成到指定out文件夹\n指定include文件\nreturn { \"CRAG666/code_runner.nvim\", config = function() require(\"code_runner\").setup({ filetype = { cpp = { \"g++ -g $file --std=c++17 -I $(pwd)/.vscode\", \"-o $(pwd)/.vscode/exe/$fileNameWithoutExt.exe\", \"\u0026\u0026 $(pwd)/.vscode/exe/$fileNameWithoutExt.exe\", }, }, }) vim.keymap.set(\"n\", \"\u003cF5\u003e\", \":RunCode\u003cCR\u003e\", { noremap = true, silent = false }) -- vim.keymap.set(\"n\", \"\u003cleader\u003erf\", \":RunFile\u003cCR\u003e\", { noremap = true, silent = false }) -- vim.keymap.set(\"n\", \"\u003cleader\u003erft\", \":RunFile tab\u003cCR\u003e\", { noremap = true, silent = false }) -- vim.keymap.set(\"n\", \"\u003cleader\u003erp\", \":RunProject\u003cCR\u003e\", { noremap = true, silent = false }) -- vim.keymap.set(\"n\", \"\u003cleader\u003erc\", \":RunClose\u003cCR\u003e\", { noremap = true, silent = false }) -- vim.keymap.set(\"n\", \"\u003cleader\u003ecrf\", \":CRFiletype\u003cCR\u003e\", { noremap = true, silent = false }) -- vim.keymap.set(\"n\", \"\u003cleader\u003ecrp\", \":CRProjects\u003cCR\u003e\", { noremap = true, silent = false }) end, } ","dap#dap":"nvim-dap https://github.com/mfussenegger/nvim-dap\ndap提供代码调试的功能\n具体配置见wiki,每个语言都不一样\n以c++为例,我这里使用vscode-cpptools\n需要安装调试器,可通过mason安装\ncommand是调试器的bin路径,mason的在~/.local/share/nvim/mason/bin/xxx 这里\nlocal dap = require('dap') dap.adapters.lldb = { type = 'executable', command = '/usr/bin/lldb-vscode', -- adjust as needed, must be absolute path name = 'lldb' } dap.configurations.cpp = { { name = 'Launch', type = 'lldb', request = 'launch', program = function() return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file') end, cwd = '${workspaceFolder}', stopOnEntry = false, args = {}, -- 💀 -- if you change `runInTerminal` to true, you might need to change the yama/ptrace_scope setting: -- -- echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope -- -- Otherwise you might get the following error: -- -- Error on launch: Failed to attach to the target process -- -- But you should be aware of the implications: -- https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html -- runInTerminal = false, }, } 从这里也可以看出,上面指定调试器,下面写调试配置\n还有调试命令, 一般我们需要开始,单行,单步调试,结束,和断点功能,这里写到keys里\nkeys = { { \"\u003cF5\u003e\", \":DapContinue\u003cCR\u003e\" }, { \"\u003cF9\u003e\", \":DapToggleBreakpoint\u003cCR\u003e\" }, { \"\u003cF10\u003e\", \":DapStepOver\u003cCR\u003e\" }, { \"\u003cF11\u003e\", \":DapStepInto\u003cCR\u003e\" }, { \"\u003cS-F11\u003e\", \":DapStepOut\u003cCR\u003e\" }, { \"\u003cF12\u003e\", \":DapTerminate\u003cCR\u003e\" }, }, 就可以调试了\n使用json文件\nrequire(\"dap.ext.vscode\").load_launchjs(nil, { cppdbg = { \"cpp\" } }) nvim-dap-ui https://github.com/rcarriga/nvim-dap-ui\n上面的调试只有原窗口和输出窗口,没有像ide里调试的ui,所以需要dap-ui配合使用\nlocal dap, dapui = require(\"dap\"), require(\"dapui\") require(\"dapui\").setup() dap.listeners.after.event_initialized[\"dapui_config\"] = function() dapui.open() end dap.listeners.before.event_terminated[\"dapui_config\"] = function() dapui.close() end dap.listeners.before.event_exited[\"dapui_config\"] = function() dapui.close() end 他这里注册了一些事件,打开或关闭ui\n我这里遇到了bug,terminated事件不能出发ui关闭,通过注册disconnect事件解决\ndap.listeners.after.disconnect[\"dapui_config\"] = function() dapui.close() end nvim-dap-virtual-text https://github.com/theHamsta/nvim-dap-virtual-text\n这个可以看到提示,配合ui使用","lazyvim的安装#lazy.vim的安装":"https://github.com/folke/lazy.nvim\n按照官方教程:\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\" if not vim.loop.fs_stat(lazypath) then vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"https://github.com/folke/lazy.nvim.git\", \"--branch=stable\", -- latest stable release lazypath, }) end vim.opt.rtp:prepend(lazypath) require(\"lazy\").setup(plugins, opts) 将这些直接添加到init.lua文件即可\n但是我们使用模块的配置,创建lua.config.lazy.lua文件,将这些复制到该文件,并在init.lua文件中导入\nrequire(\"lazy\").setup(plugins, opts) 再打开nvim时lazy就会加载,不过一开始是在后台加载,可以通过 :Lazy 调出lazy界面\n插件加载 require(\"lazy\").setup( { \"folke/which-key.nvim\", { \"folke/neoconf.nvim\", cmd = \"Neoconf\" }, \"folke/neodev.nvim\", }, { \"folke/which-key.nvim\", { \"folke/neoconf.nvim\", cmd = \"Neoconf\" }, \"folke/neodev.nvim\", }, ) 直接将plugins替换为实际的插件,具体怎么写在插件实际用到再说\n但是这样的话插件越来越多,都写在lazy.lua文件下不利于管理\n按照官方的推荐,我们替换lazy启动命令为\nrequire(\"lazy\").setup({{import = \"plugins\"}}) 与上面的相比,这个在启动时会自动加载lua/plugins文件夹下的所有插件,所以我们创建plugins文件夹,并添加插件\n替换原来的加载方式直接写在setup中,我们可以将下面的写法,通过{{import = “plugins”}}导入插件配置文件\n以上面的插件为例,可以通过在lua/plugins文件夹下创建which-key.lua文件,文件名随意,里面内容为\nreturn { \"folke/which-key.nvim\", { \"folke/neoconf.nvim\", cmd = \"Neoconf\" }, \"folke/neodev.nvim\", } 也就是多了个return\n这样就可以每个插件或多个相同功能的插件放到一个单独文件下进行模块化配置\n多个插件为以下写法,再套一层括号\nreturn { { \"folke/which-key.nvim\", { \"folke/neoconf.nvim\", cmd = \"Neoconf\" }, \"folke/neodev.nvim\", }, { \"folke/which-key.nvim\", { \"folke/neoconf.nvim\", cmd = \"Neoconf\" }, \"folke/neodev.nvim\", } } ","lsp#lsp":"lsp是语言的后端服务器,可以理解为帮助前端程序提供代码解析,高亮等功能\n其中主要目的就是代码高亮和错误提示\nnvim作为前端没有该功能,需要lsp提供服务\n这里以c++为例,c++的lsp是clang,nvim通过nvim-lspconfig管理lsp配置\n为了方便安装lsp,使用mason作为包管理工具\nnvim-treesitter提供一个简单和容易的方式来使用tree-sitter在Neovim并提供一些基本的功能\nmason 官方直接抄,输入:Mason打开界面\nmason提供各类安装\nlsp:语言服务器代理,提供语法语义功能\ndap:调试适配协议,提供debug功能\nlinter:静态代码分析工具，可以检查代码质量和风格问题\nformatter:格式化工具\nreturn { \"williamboman/mason.nvim\", config = function() require(\"mason\").setup({ ui = { icons = { package_installed = \"✓\", package_pending = \"➜\", package_uninstalled = \"✗\", }, }, }) end, } nvim-lspconfig https://github.com/neovim/nvim-lspconfig\nreturn { \"neovim/nvim-lspconfig\", dependencies = { -- { -- \"folke/neoconf.nvim\", -- cmd = \"Neoconf\", -- config = false, -- dependencies = { -- \"nvim-lspconfig\", -- }, -- }, { \"folke/neodev.nvim\", opts = {}, }, \"mason.nvim\", \"williamboman/mason-lspconfig.nvim\", }, config = function() local lspconfig = require(\"lspconfig\") lspconfig[\"lua_ls\"].setup({}) lspconfig[\"clangd\"].setup({}) -- Global mappings. -- See `:help vim.diagnostic.*` for documentation on any of the below functions vim.keymap.set(\"n\", \"\u003cspace\u003ed\", vim.diagnostic.open_float) vim.keymap.set(\"n\", \"[d\", vim.diagnostic.goto_prev) vim.keymap.set(\"n\", \"]d\", vim.diagnostic.goto_next) vim.keymap.set(\"n\", \"\u003cspace\u003eq\", vim.diagnostic.setloclist) -- Use LspAttach autocommand to only map the following keys -- after the language server attaches to the current buffer vim.api.nvim_create_autocmd(\"LspAttach\", { group = vim.api.nvim_create_augroup(\"UserLspConfig\", {}), callback = function(ev) -- Enable completion triggered by \u003cc-x\u003e\u003cc-o\u003e vim.bo[ev.buf].omnifunc = \"v:lua.vim.lsp.omnifunc\" -- Buffer local mappings. -- See `:help vim.lsp.*` for documentation on any of the below functions local opts = { buffer = ev.buf } vim.keymap.set(\"n\", \"gD\", vim.lsp.buf.declaration, opts) vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts) vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts) vim.keymap.set(\"n\", \"gi\", vim.lsp.buf.implementation, opts) -- vim.keymap.set(\"n\", \"\u003cC-k\u003e\", vim.lsp.buf.signature_help, opts) -- vim.keymap.set(\"n\", \"\u003cspace\u003ewa\", vim.lsp.buf.add_workspace_folder, opts) -- vim.keymap.set(\"n\", \"\u003cspace\u003ewr\", vim.lsp.buf.remove_workspace_folder, opts) -- vim.keymap.set(\"n\", \"\u003cspace\u003ewl\", function() -- print(vim.inspect(vim.lsp.buf.list_workspace_folders())) -- end, opts) -- vim.keymap.set(\"n\", \"\u003cspace\u003eD\", vim.lsp.buf.type_definition, opts) -- vim.keymap.set(\"n\", \"\u003cspace\u003ern\", vim.lsp.buf.rename, opts) -- vim.keymap.set({ \"n\", \"v\" }, \"\u003cspace\u003eca\", vim.lsp.buf.code_action, opts) -- vim.keymap.set(\"n\", \"gr\", vim.lsp.buf.references, opts) -- vim.keymap.set(\"n\", \"\u003cspace\u003ef\", function() -- vim.lsp.buf.format({ async = true }) -- end, opts) end, }) end, } 这里主要是直接抄官方的,加了几个依赖\nmason-lspconfig用来整合lsp和mason\nneodev用来对vim lua的api提示, 主要是没这个vim报警告\nconfig里是官方的,要注意开头setup的是你自己的lsp,有些map我用不着就注释了\n比如 lspconfig[“clangd”].setup({})\nnvim-treesitter https://github.com/nvim-treesitter/nvim-treesitter\n代码高亮\nreturn { \"nvim-treesitter/nvim-treesitter\", build = \":TSUpdate\", config = function() require(\"nvim-treesitter.configs\").setup({ ensure_installed = { \"c\", \"c++\", \"lua\", \"vim\", \"vimdoc\", \"query\" }, sync_install = false, auto_install = true, highlight = { enable = true, additional_vim_regex_highlighting = false, }, }) end, } rainbow-delimiters 括号颜色区分\n{ \"hiphish/rainbow-delimiters.nvim\", config = function() -- This module contains a number of default definitions local rainbow_delimiters = require(\"rainbow-delimiters\") vim.g.rainbow_delimiters = { strategy = { [\"\"] = rainbow_delimiters.strategy[\"global\"], vim = rainbow_delimiters.strategy[\"local\"], }, query = { [\"\"] = \"rainbow-delimiters\", lua = \"rainbow-blocks\", }, priority = { [\"\"] = 110, lua = 210, }, highlight = { \"RainbowDelimiterRed\", \"RainbowDelimiterYellow\", \"RainbowDelimiterBlue\", \"RainbowDelimiterOrange\", \"RainbowDelimiterGreen\", \"RainbowDelimiterViolet\", \"RainbowDelimiterCyan\", }, } end, }, nvim-cmp 代码补全\n需要改以下官方的\nPlug ’neovim/nvim-lspconfig' Plug ‘hrsh7th/cmp-nvim-lsp’\n这些除了自己全写成依赖\nlua那里全写到function\n然后有4个snip插件,选一个把下面启动的注释删了\n我这里选第二个,因为后面用到了\noffsets = { { filetype = \"NvimTree\", text = \"File Explorer\" | function , text_align = \"left\" | \"center\" | \"right\" separator = true } }, offsets = { { filetype = \"NvimTree\", text = \"File Explorer\", highlight = \"Directory\", separator = true -- use a \"true\" to enable the default, or set your own character } } cmp也只是个补全的前端,他需要依赖其他源才能补全\n正如依赖中所示有nvim-lsp buffer path cmdline\n我们还可以添加其他源\n官方的源列表: https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources\n添加lspkind可提供icon和来源提示\nhttps://github.com/onsails/lspkind.nvim\nlocal cmp = require('cmp') local lspkind = require('lspkind') cmp.setup { formatting = { format = lspkind.cmp_format(), }, } 最终配置\nreturn { \"hrsh7th/nvim-cmp\", -- event = \"InsertEnter\", dependencies = { \"neovim/nvim-lspconfig\", \"hrsh7th/cmp-nvim-lsp\", \"hrsh7th/cmp-buffer\", \"hrsh7th/cmp-path\", \"hrsh7th/cmp-cmdline\", \"L3MON4D3/LuaSnip\", \"saadparwaiz1/cmp_luasnip\", \"rafamadriz/friendly-snippets\", \"onsails/lspkind-nvim\", }, config = function() local cmp = require(\"cmp\") local lspkind = require(\"lspkind\") cmp.setup({ snippet = { expand = function(args) require(\"luasnip\").lsp_expand(args.body) -- For `luasnip` users. end, }, window = {}, mapping = cmp.mapping.preset.insert({ [\"\u003cC-b\u003e\"] = cmp.mapping.scroll_docs(-4), [\"\u003cC-f\u003e\"] = cmp.mapping.scroll_docs(4), [\"\u003cC-Space\u003e\"] = cmp.mapping.complete(), [\"\u003cC-e\u003e\"] = cmp.mapping.abort(), [\"\u003cCR\u003e\"] = cmp.mapping.confirm({ select = true }), }), sources = cmp.config.sources({ { name = \"nvim_lsp\" }, { name = \"luasnip\" }, -- For luasnip users. }, { { name = \"buffer\" }, { name = \"path\" }, }), formatting = { format = lspkind.cmp_format({ maxwidth = 50, ellipsis_char = \"...\", }), }, }) cmp.setup.filetype(\"gitcommit\", { sources = cmp.config.sources({ { name = \"git\" }, }, { { name = \"buffer\" }, }), }) cmp.setup.cmdline({ \"/\", \"?\" }, { mapping = cmp.mapping.preset.cmdline(), sources = { { name = \"buffer\" }, }, }) cmp.setup.cmdline(\":\", { mapping = cmp.mapping.preset.cmdline(), sources = cmp.config.sources({ { name = \"path\" }, }, { { name = \"cmdline\" }, }), }) -- 加载friendly-snippets require(\"luasnip.loaders.from_vscode\").lazy_load() -- 加载自己写的snippets 在~/.config/nvim/snippets/cpp.code-snippets文件 require(\"luasnip.loaders.from_vscode\").load_standalone({ path = \"./snippets/cpp.code-snippets\", }) local capabilities = require(\"cmp_nvim_lsp\").default_capabilities() require(\"lspconfig\")[\"clangd\"].setup({ capabilities = capabilities, }) end, } ","neovim的配置文件#neovim的配置文件":"neovim使用lua作为配置文件,以init.lua文件作为配置文件入口\nlua的包导入:require(“aa.xx”)\naa分别是目录路径可以递归 aa.bb.cc.dd.ee\nxx是lua文件的文件名,不需要xx.lua\nneovim可以默认从lua文件导入包,也就是可以创建lua的文件夹,lua下的文件可以直接导入\n如: lua/config/keymaps.lua\n可以在init.lua中直接使用 require(“config.keymaps”)导入\n多种写法,lua都支持\nrequire(“xxx”) = require(‘xxx’) = require\"xxx\" = require’xxx’ config.keymaps = config/keymaps 这是我的配置文件tree\nnvim ├── init.lua └── lua ├── config │ ├── core │ │ ├── keymaps.lua │ │ └── options.lua │ └── lazy.lua └── plugins ├── xxx.lua\n非常简单,config.core文件夹作为neovim的基本配置文件,lazy.lua文件用于lazy.nvim的加载\nplugins文件夹下放置插件\n核心文件 当然core文件是随意建的,可以不要,也可以改名,只要导入时路径对即可\nkeymaps:这里面是改键的映射,我在这里只改了vim的通用按键,插件的按键放到了插件文件里,这个以个人喜好全放到keymaps文件也可以,我是以插件的配置全放到该插件里利于管理\nvim.g.mapleader = \" \" local keymap = vim.keymap keymap.set(\"i\",\"jk\",\"\u003cESC\u003e\") -- window navigation keymap.set(\"n\",\"\u003cC-h\u003e\",\"\u003cC-w\u003eh\") keymap.set(\"n\",\"\u003cC-j\u003e\",\"\u003cC-w\u003ej\") keymap.set(\"n\",\"\u003cC-k\u003e\",\"\u003cC-w\u003ek\") keymap.set(\"n\",\"\u003cC-l\u003e\",\"\u003cC-w\u003el\") keymap.set(\"n\",\"\u003cC-q\u003e\",\"\u003cC-w\u003eq\") keymap.set(\"n\",\"\u003cC-\\\\\u003e\",\"\u003cC-w\u003ev\") keymap.set(\"n\",\"\u003cC--\u003e\",\"\u003cC-w\u003es\") -- resize window keymap.set(\"n\",\"\u003cC-Up\u003e\",\":resize -2\u003cCR\u003e\") keymap.set(\"n\",\"\u003cC-Down\u003e\",\":resize +2\u003cCR\u003e\") keymap.set(\"n\",\"\u003cC-Left\u003e\",\":vertical resize -2\u003cCR\u003e\") keymap.set(\"n\",\"\u003cC-Right\u003e\",\":vertical resize +2\u003cCR\u003e\") -- 缩进 keymap.set(\"v\",\"\u003cS-TAB\u003e\",\"\u003cgv\") keymap.set(\"v\",\"\u003cTAB\u003e\",\"\u003egv\") -- 多行移动 keymap.set(\"v\",\"J\",\":m '\u003e+1\u003cCR\u003egv=gv\") keymap.set(\"v\",\"K\",\":m '\u003c-2\u003cCR\u003egv=gv\") 只改了一些通用的配置,如jk换esc, window的移动,resize,缩进按照其他ide的习惯,使用tab\n第一行是设置主键,可以通过\u003c leader\u003e+其他键作为快捷键\noptions: 这里面是对vim的配置进行设置\nlocal opt = vim.opt -- 行号 opt.relativenumber = true opt.number = true -- 缩进 opt.tabstop = 4 opt.shiftwidth = 4 opt.expandtab = true opt.autoindent = true opt.wrap = false opt.cursorline = true opt.clipboard:append(\"unnamedplus\") opt.termguicolors = true opt.signcolumn = \"yes\" 都是些常用的设置\n然后在init.lua里导入\nrequire(\"config.core.keymaps\") require(\"config.core.options\") ","写代码需要的功能#写代码需要的功能":" 代码格式化 代码高亮 代码补全 调试功能 注释 coderunner快捷运行代码 lsp设置includepath 自定义snippets脚本 终端显示 git ui ","安装#安装":"复制nvim配置文件\n外部安装 ripgrep,fd,lazygit","插件#插件":"这是我当前用的基本插件\nlualine: 下面的状态栏,好看一点 bufferline: 上面的已打开的buffer nvim-tree: 文件管理器 主题 telescope: 文件搜索 whick-key: 提示快捷键 mini: 大括号范围提示 flash: 光标跳转 comment: 注释 lsp系列 dap系列 我的原则是能不自己写就不自己写,直接抄官方的配置,尽量减少改动\n一般的插件可能没有lazy的配置, 所以需要一些改动\nlualine https://github.com/nvim-lualine/lualine.nvim\npacker.nvim\nuse { 'nvim-lualine/lualine.nvim', requires = { 'nvim-tree/nvim-web-devicons', opt = true } } 改为\nuse换return\nrequires是依赖项, 换dependencies\nopt = true是默认配置,可以不写\n第一行是github的库名\n然后还需要启动,写在config = function里\nreturn { 'nvim-lualine/lualine.nvim', dependencies = { 'nvim-tree/nvim-web-devicons'} opt = {} config = function(_,opt) require('lualine').setup(opt) end, } 由于opt没写,启动只是默认配置和 require(’lualine’).setup() 一样\n可以简写为, 使用默认配置\nreturn { 'nvim-lualine/lualine.nvim', dependencies = { 'nvim-tree/nvim-web-devicons'} config = true } 如果需要改配置,可写在opt里,或是直接写在setup({})里,需要执行的命令可写在function里\nbufferline https://github.com/akinsho/bufferline.nvim\n提供了lazy配置\nreturn { 'akinsho/bufferline.nvim', version = \"*\", dependencies = 'nvim-tree/nvim-web-devicons' config = function() vim.opt.termguicolors = true require(\"bufferline\").setup({ options = { offsets = { { filetype = \"NvimTree\", text = \"File Explorer\", highlight = \"Directory\", separator = true, -- use a \"true\" to enable the default, or set your own character }, }, }, }) end, } 注意这里启动是多了 vim.opt.termguicolors = true 配置 开启终端真颜色, 可以写在这里,或者options.lua文件里\n按照官方提示See the docs for details :h bufferline.nvim\n查找command项, 有关闭buffer的命令, 没找到切换buffer的命令\nBufferLineCloseRight - close all visible buffers to the right of the current buffer BufferLineCloseLeft - close all visible buffers to the left of the current buffer BufferLineCloseOthers - close all other visible buffers 在sorting项中找到了,因为原生vim中有切换的操作,不过建议用bufferline的\nWhen using a sorted bufferline it’s advisable that you use theBufferLineCycleNext and BufferLineCyclePrev commands since these will traverse the bufferline bufferlist in order whereas bnext and bprev will cycle buffers according to the buffer numbers given by vim.\nnnoremap \u003csilent\u003e[b :BufferLineCycleNext\u003cCR\u003e nnoremap \u003csilent\u003eb] :BufferLineCyclePrev\u003cCR\u003e 改键切换buffer,这里至改前后切换,其他命令改键类似\n上面那个可能是原生vim的写法, 我们使用neovim的lua方式\nvim.keymap.set(\"n\", \"\u003cS-h\u003e\", \":BufferLineCyclePrev\u003cCR\u003e\") vim.keymap.set(\"n\", \"\u003cS-l\u003e\", \":BufferLineCycleNext\u003cCR\u003e\") 在normal (n)模式下,按 shift+h 切换到上一个buffer\n改键配置写的config中或keymaps文件, 我直接写在这了, 最终配置文件为\nreturn { \"akinsho/bufferline.nvim\", version = \"*\", dependencies = \"nvim-tree/nvim-web-devicons\", config = function() vim.opt.termguicolors = true require(\"bufferline\").setup() vim.keymap.set(\"n\", \"\u003cS-h\u003e\", \":BufferLineCyclePrev\u003cCR\u003e\") vim.keymap.set(\"n\", \"\u003cS-l\u003e\", \":BufferLineCycleNext\u003cCR\u003e\") end, } nvim-tree https://github.com/nvim-tree/nvim-tree.lua\n直接官网的install\nnvim-tree/nvim-tree.lua `nvim-tree/nvim-web-devicons` optional, for file icons 写为\nreturn { \"nvim-tree/nvim-tree.lua\", dependencies = { \"nvim-tree/nvim-web-devicons\", }, } setup照抄到config function,命令看command, 再加一个改键\nreturn { \"nvim-tree/nvim-tree.lua\", dependencies = { \"nvim-tree/nvim-web-devicons\", }, config = function() -- disable netrw at the very start of your init.lua vim.g.loaded_netrw = 1 vim.g.loaded_netrwPlugin = 1 -- set termguicolors to enable highlight groups vim.opt.termguicolors = true require(\"nvim-tree\").setup({ sort = { sorter = \"case_sensitive\", }, view = { width = 30, }, renderer = { group_empty = true, }, filters = { dotfiles = true, }, }) vim.keymap.set(\"n\", \"\u003cleader\u003ee\", \":NvimTreeToggle\u003ccr\u003e\") end, } 主题 我这里用的是tokyonight\nhttps://github.com/folke/tokyonight.nvim\n配置照抄,加上启用命令\nreturn { \"folke/tokyonight.nvim\", lazy = false, priority = 1000, opts = {}, config = function() vim.cmd([[colorscheme tokyonight]]) end, } telescope 文件搜索\nhttps://github.com/nvim-telescope/telescope.nvim\n要功能更强大需要更多依赖\n按照官方的建议,可选依赖\nBurntSushi/ripgrep,\nsharkdp/fd (finder)\nnvim-treesitter/nvim-treesitter (finder/preview)\nneovim LSP (picker)\ndevicons (icons)\n其中ripgrep和fd通过外部安装,我的是arch pacman即可,其他系统见github页面\npreview因为我的终端太小打不开,使用preview_cutoff = 0, 强制开启, 不过也没啥用, 太小了\nreturn { \"nvim-telescope/telescope.nvim\", tag = \"0.1.5\", dependencies = { \"nvim-lua/plenary.nvim\", \"nvim-treesitter/nvim-treesitter\", \"nvim-tree/nvim-web-devicons\", }, config = function() require(\"telescope\").setup({ defaults = { layout_config = { horizontal = { preview_cutoff = 0, }, }, }, }) local builtin = require(\"telescope.builtin\") vim.keymap.set(\"n\", \"\u003cC-p\u003e\", builtin.find_files, {}) vim.keymap.set(\"n\", \"\u003cC-f\u003e\", builtin.live_grep, {}) end, } which-key https://github.com/folke/which-key.nvim\n按下一个键后,提示下一个设置的快捷键, 习惯了就没用了\nreturn { \"folke/which-key.nvim\", event = \"VeryLazy\", init = function() vim.o.timeout = true vim.o.timeoutlen = 300 end, opt = {} -- or -- config = true } flash https://github.com/folke/flash.nvim\n光标跳转,非常nb\n{ \"folke/flash.nvim\", event = \"VeryLazy\", ---@type Flash.Config opts = {}, -- stylua: ignore keys = { { \"s\", mode = { \"n\", \"x\", \"o\" }, function() require(\"flash\").jump() end, desc = \"Flash\" }, { \"S\", mode = { \"n\", \"x\", \"o\" }, function() require(\"flash\").treesitter() end, desc = \"Flash Treesitter\" }, { \"r\", mode = \"o\", function() require(\"flash\").remote() end, desc = \"Remote Flash\" }, { \"R\", mode = { \"o\", \"x\" }, function() require(\"flash\").treesitter_search() end, desc = \"Treesitter Search\" }, { \"\u003cc-s\u003e\", mode = { \"c\" }, function() require(\"flash\").toggle() end, desc = \"Toggle Flash Search\" }, }, } persistence 窗口持久化插件,就是关闭vim后,下次打开可以恢复上次的浏览状况,好像用处不大\nreturn { \"folke/persistence.nvim\", event = \"BufReadPre\", -- this will only start session saving when an actual file was opened lazy = true, opts = { dir = vim.fn.expand(vim.fn.stdpath(\"state\") .. \"/sessions/\"), -- directory where session files are saved options = { \"buffers\", \"curdir\", \"tabpages\", \"winsize\" }, -- sessionoptions used for saving pre_save = nil, -- a function to call before saving the session save_empty = false, -- don't save if there are no open file buffers }, config = function(_, opts) require(\"persistence\").setup(opts) -- restore the session for the current directory vim.api.nvim_set_keymap(\"n\", \"\u003cleader\u003eqs\", [[\u003ccmd\u003elua require(\"persistence\").load()\u003ccr\u003e]], {}) -- restore the last session vim.api.nvim_set_keymap(\"n\", \"\u003cleader\u003eql\", [[\u003ccmd\u003elua require(\"persistence\").load({ last = true })\u003ccr\u003e]], {}) -- stop Persistence =\u003e session won't be saved on exit vim.api.nvim_set_keymap(\"n\", \"\u003cleader\u003eqd\", [[\u003ccmd\u003elua require(\"persistence\").stop()\u003ccr\u003e]], {}) end, } toggleterm 可以在vim内打开终端,可配合lazygit程序使用\nreturn { \"akinsho/toggleterm.nvim\", version = \"*\", config = function() require(\"toggleterm\").setup({ open_mapping = \"\u003cC-/\u003e\", direction = \"float\", shade_terminals = true, }) local Terminal = require(\"toggleterm.terminal\").Terminal local lazygit = Terminal:new({ cmd = \"lazygit\", hidden = true }) function _lazygit_toggle() lazygit:toggle() end vim.api.nvim_set_keymap(\"n\", \"\u003cleader\u003eg\", \"\u003ccmd\u003elua _lazygit_toggle()\u003cCR\u003e\", { noremap = true, silent = true }) end, } indent-blankline 每个缩进都有线标识\nreturn { \"lukas-reineke/indent-blankline.nvim\", main = \"ibl\", opts = {}, } "},"title":"Neovim"},"/blog/vscode/":{"data":{"":"vscode在wayland下的使用及一些配置","wayland下运行#wayland下运行":"按照arch官方的介绍使用\n为每个应用单独添加命令行参数或者编写全局配置文件，可以为 Electron 应用添加 Wayland 支持。\n因为vscode版本没有依赖electron包，所以用electron-flag的配置文件无效\n这里直接对.desktop文件进行修改\n/usr/share/applications/中code.desktop\nExec后加上–ozone-platform-hint=auto","代码主题颜色#代码主题颜色":"一般来说，代码的颜色是根据主题更改的，但是我们想要自定义颜色的话，需要在settings里设置，如：\n分为两个editor.tokenColorCustomizations和editor.semanticTokenColorCustomizations\neditor.tokenColorCustomizations基于TextMate设置颜色，后面那个基于语言的语义标记（目前：TypeScript、JavaScript、Java）\nvscode语义：\nhttps://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#enablement-of-semantic-highlighting\nTextMate语法：https://www.apeth.com/nonblog/stories/textmatebundle.html\n这里使用c++\n提供的规则如下：\n“comments”:注释颜色 “functions”:函数/方法定义与引用颜色 “keywords”:关键字颜色，如new, if, else, try等 “numbers”:数字的颜色 “strings”:字符串的颜色 “types”:类型定义与引用的颜色 “variables”:变量的颜色 “textMateRules”:其他具体的颜色设置\n\"editor.tokenColorCustomizations\": { \"[Monokai]\": {\t// 可对指定主题设置\t\"comments\": \"#229977\" }, \"[*Dark*]\": { \"variables\": \"#229977\" }, \"[Abyss][Red]\": { \"keywords\": \"#f00\" } } 上面的设置不能涵盖所有需求，可通过textMateRules设置，不过大部分可通过后面的语义标志覆盖\n如果你不知道什么语义，可以通过ctrl+shift+p中输入develop: inspect xxx\n注：语义标记editor.semanticTokenColorCustomizations需基于扩展c/c++ ，不太好用\n我的设置：\n\"editor.tokenColorCustomizations\": { \"[Brackets Light Pro]\": {\t// 可对指定主题设置\t\"comments\": \"#20a162\", \"keywords\": \"#1661ab\", \"numbers\": \"#607e30\", // \"strings\": \"#ff0000\", \"textMateRules\": [ { // true false \"scope\": \"constant.language\", \"settings\": { \"foreground\": \"#ff0000\" }\t}, { \"scope\": \"entity.name.type\", \"settings\": { \"foreground\": \"#bd6d26\", } }, // 下面这个覆盖上面的 { \"scope\": \"entity.name.type.class.templated\", \"settings\": { \"foreground\": \"#c203c2\", } }, { \"scope\": \"entity.name.type.struct\", \"settings\": { \"foreground\": \"#c203c2\", } }, { \"scope\": \"entity.name.type.parameter\", \"settings\": { \"foreground\": \"#c203c2\", } }, { \"scope\": \"entity.name.function\", \"settings\": { \"foreground\": \"#020fc9\", } }, { \"scope\": \"entity.name.namespace\", \"settings\": { \"foreground\": \"#c203c2\", } }, { \"scope\": \"variable.other.property\", \"settings\": { \"foreground\": \"#6318ae\", } }, { \"scope\": \"variable.other.enummember\", \"settings\": { \"foreground\": \"#ff0000\", } }, { \"scope\": \"variable.parameter\", \"settings\": { \"foreground\": \"#c83442\", } }, ], // 与下面的冲突 // \"functions\": \"#ff0000\", // \"types\": \"#ff0000\", \"variables\": \"#000000\", } }, 测试代码\n// 关键字，头文件 #include \u003ciostream\u003e #include \u003cvector\u003e #include \"node.h\" // 函数，命名空间namespace using namespace std; // global int quanju = 0; void fun() { // 普通变量variable，常量 bool puputongtong = true; char* d = \"string\"; int b = 10; } // color_set1 type enum color_set1 {RED, BLUE, WHITE, BLACK}; // T type template\u003cclass T\u003e // templateType class Solution{ public: // property T prop; //函数method 类class 参数 parameter int maxSubArray(vector\u003cint\u003e\u0026 nums) { return 0; } virtual void virfun(){}; }; template\u003cclass T\u003e // templateFunction void tempfun(){} // 函数function int main(){ // new operator Solution\u003cint\u003e* solution = new Solution\u003cint\u003e(); solution-\u003eprop = 0; (*solution).prop = 1; int sum = 10 + 10 / 2; // \u003c\u003c operator cout\u003c\u003cendl; return 0; } // 评论：绿 // 函数：深蓝 // 关键字：浅蓝 // 类，命名空间：紫色 // 普通变量：黑色 // 数字：茶色 // 类内属性：紫色 // 参数：红 // 字符串：橙 ","安装#安装":"archlinux系统直接使用aur包安装\n装官方版的这个，code版没有登陆和扩展\nparu -S visual-studio-code-bin ","括号颜色#括号颜色":"\t\"workbench.colorCustomizations\": { \"[Brackets Light Pro]\": { \"editorBracketHighlight.foreground1\": \"#34a0ee\", \"editorBracketHighlight.foreground2\": \"#d7181e\", \"editorBracketHighlight.foreground3\": \"#f0942b\", \"editorBracketHighlight.foreground4\": \"#ee4be8\", \"editorBracketHighlight.foreground5\": \"#01b1b1\", \"editorBracketHighlight.foreground6\": \"#24d600\" } }, ","问题#问题":"开启wayland后闪退 直接使用code –ozone-platform-hint=auto闪退\n解决：https://github.com/microsoft/vscode/issues/146349\n这个与配置文件有关，应该是自定义的配置文件和现在的版本有冲突\n安装好vscode后在.config/Code/User/setting.json中加入，没有就创建\n{ \"window.titleBarStyle\": \"custom\" } 重新打开会发现恢复到了默认配置\nwayland下无法使用fcitx5输入法 加入–enable-wayland-ime"},"title":"vscode"},"/docs/":{"data":{"":" c++现代c++ linux如何使用hyprland "},"title":"Documentation"},"/docs/linux/":{"data":{"":"该专栏中包括：\n深度学习环境搭建 Linux常用命令 Linux常用软件 Archlinux Hyprland "},"title":"Linux"},"/docs/linux/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/":{"data":{"":"","ubuntu系统内核及显卡驱动更新#ubuntu系统内核及显卡驱动更新":"查看已安装内核 1. dpkg --get-selections | grep linux-image 2. cat /boot/grub/grub.cfg |grep menuentry 查看当前内核 uname -a 禁止内核更新 1.禁止自动升级\n修改配置文件/etc/apt/apt.conf.d/10periodic #０是关闭，1是开启，将所有值改为0\nvi etc/apt/apt.conf.d/10periodic APT::Periodic::Update-Package-Lists \"0\"; APT::Periodic::Download-Upgradeable-Packages \"0\"; APT::Periodic::AutocleanInterval \"0\"; 2.固定版本\nsudo apt-mark hold linux-image-generic linux-headers-generic sudo apt-mark hold linux-image-5.3.0-42-generic sudo apt-mark hold linux-image-extra-5.3.0-42-generic # 重启内核更新 sudo apt-mark unhold linux-image-5.3.0-42-generic sudo apt-mark unhold linux-image-extra-5.3.0-42-generic 3.更改引导启动文件\ncat /etc/default/grub 修改默认启动内核：\n老版本：\nGRUB_DEFAULT=\"Ubuntu, with Linux 5.4.0-99-generic\" 新版本：\nGRUB_DEFAULT=\"Advanced options for Ubuntu\u003eUbuntu, with Linux 5.4.0-99-generic\" GRUB_DEFAULT=\"1\u003e 6\" \u003e 和6之间有空格 ？？ 0 是 Ubuntu\n1代表启动时第一层菜单里的 Advanced options for Ubuntu，\n2，3，4，5，6为查看内核中依次的顺序 其中2, 3 4, 5 6, 7 分别为一组的正常和恢复模式\n我们选择正常，也就是2，4，6\n6即为指定内核的Index。\n更改配置文件后更新，有错误会提醒：\nsudo update-grub 查看显卡硬件信息 lshw -c video 查看显卡内核模块版本 cat /proc/driver/nvidia/version 查看显卡驱动版本 sudo dpkg --list | grep nvidia-* sudo dpkg --get-selections | grep nvidia-* 上面两个版本需一致 否则报 Failed to initialize NVML: Driver/library version mismatch 错误 只需reboot\n查看当前使用cuda版本 nvcc -V 查看ubuntu更新日志 cat /var/log/apt/history.log 查看报错详情 dmesg |tail -4 dmesg 显示开机后系统信息 -T显示人类时间\ntail 查看文件 -4 最后四行\nnvidia显卡卸载安装(命令行) 查看可用版本\nsudo ubuntu-drivers devices 安装\nsudo ubuntu-drivers autoinstall # 或 sudo apt install nvidia-driver-版本号 # 服务器版本 sudo apt install nvidia-driver-版本号-server 文件安装\nsudo chmod a+x NVIDIA-Linux-x86_64-450.80.02.run ubuntu 16.04默认安装了第三方开源的驱动程序nouveau，安装nvidia显卡驱动首先需要禁用nouveau，不然会碰到冲突的问题，导致无法安装nvidia显卡驱动。\nsudo ./NVIDIA-Linux-x86_64-450.80.02.run -no-x-check -no-nouveau-check -no-opengl-files 卸载\n装新版本自动卸载老版本\nsudo /usr/bin/nvidia-uninstall sudo apt purge nvidia-* sudo apt purge nvidia* sudo apt purge libnvidia* ","基础环境安装#基础环境安装":"ubuntu系统非最新版本最小安装即可\n按照安装顺序进入桌面\n安装更新 弹窗（系统提示，可不更新）","安装anaconda#安装anaconda":"安装包直接安装，注意root用户还是其他用户，一般普通用户就行\n安装路径可以设置在非系统盘中，这样重装系统不会删除环境\nsh 安装包.sh 后有点慢，注意不是卡了\n# \u003e\u003e\u003e conda initialize \u003e\u003e\u003e # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/data/anaconda3/bin/conda' 'shell.bash' 'hook' 2\u003e /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/data/anaconda3/etc/profile.d/conda.sh\" ]; then . \"/data/anaconda3/etc/profile.d/conda.sh\" else export PATH=\"/data/anaconda3/bin:$PATH\" fi fi unset __conda_setup # \u003c\u003c\u003c conda initialize \u003c\u003c\u003c ","开启ssh和ftp#开启ssh和ftp":"ssh sudo apt-get install openssh-server sudo systemctl start ssh sudo systemctl enable ssh ftp sudo apt-get install vsftpd sudo systemctl start vsftpd sudo systemctl enable vsftpd 固定ip地址 在设置里选静态ip，输入ip，掩码，网关","显卡驱动及cuda安装#显卡驱动及cuda安装":"安装显卡驱动 可通过 软件和更新-附加驱动 选择驱动 自动安装**（建议）**\n自行安装：\n查看可安装驱动版本:\nubuntu-drivers devices 选择某版本安装：\nsudo apt install nvidia-driver-* 上面两种方式都需要网络环境，还可以选择用安装包安装\n此方法比较麻烦，可去网络自行查看，不做介绍\n安装完成后检查\nnvidia-smi 可能出现\nNVIDIA -SMI has failed because it couldn 't communicate with the NVIDIA driver. Make sure th at the l ate st NVIDIA driver is installed and running 解决方法 重启即可\n#### sudo apt-get install dkms 利用命令 ls /usr/src 可查看下面有一个nvidia-450.102.04/ 文件夹 sudo dkms install -m nvidia -v 450.102.04 #后边的版本号是nvidia-后边的 安装cuda11.3 可去官网下载对应的包 地址：https://developer.nvidia.com/cuda-toolkit-archive\n建议使用runfile文件安装 一开始没反应是在加载 等一会\nsudo ./cuda_11.3.1_465.19.01_linux.run 安装时注意不要安装驱动，因为已经安装更新的了\n安装完检查 nvcc -V\n这时你会发现没有找到，不要安装，是因为环境变量没有配置\n打开自己user的.bashrc文件 可以用nano，或者vi，vim（可能没下）\nnano ~/.bashrc 添加环境变量\nexport PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH ctrl+o写入 ctrl+x离开\n重新打开终端 更新环境变量\n再次检查 发现已经找到cuda\nnvcc -V 安装cudnn 地址：https://developer.nvidia.com/rdp/cudnn-archive\n根据cuda版本选择 建议选择tar包下载\n# 解压 tar -xvf cudnn-linux-x86_64-8.4.0.27_cuda11.6-archive.tar.xz # cuda-后填版本号 # 复制文件 sudo cp cudnn-*-archive/include/cudnn*.h /usr/local/cuda-/include sudo cp -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda-/lib64 # 添加权限 sudo chmod a+r /usr/local/cuda-/include/cudnn*.h /usr/local/cuda-/lib64/libcudnn* ","深度学习常用命令#深度学习常用命令":"conda 创建环境\nconda create -n env_name python=x.x 复制环境\nconda create -n BBB --clone AAA 删除环境\nconda remove -n env_name --all 激活环境\nsource/conda activate env_name 退出环境\nconda deactivate 列出所有虚拟环境\nconda env list 或 conda info -e/env 环境信息\nconda info 迁移环境\n# 进入环境 conda activate bcy # 导出 environment.yml 文件： conda env export \u003e environment.yml # 注意：如果当前路径已经有了 environment.yml 文件，conda 会重写这个文件 # 重现环境：不需要创建环境会自己创建 # 注：从网上安装的可以重新下载，从文件安装的不会 conda env create -f environment.yml 修改conda源\n查看所有配置 conda config --show 添加源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ 中科大的源 conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/ 阿里云的源 conda config --add channels http://mirrors.aliyun.com/pypi/simple/ 删除源 conda config --remove channels http://mirrors.aliyun.com/pypi/simple/ 设置展示源 conda config --set show_channel_urls yes pip 安装\npip install SomePackage # 安装指定版本 pip install SomePackage==1.0 # 更新包 pip install --upgrade SomePackage 删除\npip remove SomePackage 修改pip源\n当次指定 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas 配置修改 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 阿里云 http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 豆瓣(douban) http://pypi.douban.com/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 或 在当前用户目录下创建.pip文件夹: mkdir ~/.pip 在该目录下创建pip.conf文件填写 vim ~/.pip/pip.conf [global] trusted-host=[主机名] index-url=[镜像源的url] 查看安装的包\npip list 查看指定包的详细信息\npip show Package 查看系统支持 cp （python）版本\nimport pip; print(pip._internal.pep425tags.get_supported()); python -m pip debug --verbose apt 更新\nsudo apt update sudo apt upgrade 修改apt源\n1.备份系统默认源 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 2.打开软件源文件 sudo vim /etc/apt/sources.list deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse 查看显卡占用 nvidia-smi 每1秒刷新一次 watch -n 1 -d nvidia-smi "},"title":"深度学习环境搭建"},"/docs/linux/archlinux/":{"data":{"":"","arch快速安装总结#arch快速安装总结":"GRUB设置 闪屏：i915.enable_psr=0 将nomodeset添加到内核命令行来关闭KMS（即进入grub选择界面时按e） 永久的方法是在/etc/default/grub中的这一行加上nomodeset\nGRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet nomodeset\" 然后执行以下命令更新\ngrub-mkconfig -o /boot/grub/grub.cfg 但这可能会导致一些桌面特效无法使用等其他问题。 如果是笔记本，闪屏的另外一个原因可能是由于面板自我刷新（英特尔iGPUs的省电功能）。解决方法是将\ni915.enable_psr=0 添加到内核命令行关闭此功能\n笔记本键盘失效：i8042.dumbkbd 固件或内核的bug会导致ACPI PNP设备显示为可用，进而导致i8042模块检测到AUX端口，这些端口在恢复期间被探测，这会导致键盘停止工作。解决方法是将i8042.noaux添加到内核命令行。在使用电池启动时，更可能出现此问题。 对于新机型可能参数不一样，可以去搜一搜wiki，我在wiki中找到了我的电脑（Lenovo Yoga 14s 2021），加入的内核命令行参数为\ni8042.dumbkbd live 制作arch系统盘，进入live环境，先联网\n有线 # 自动获取ip dhcpcd 无线 # 查看网卡 ip link wpa_supplicant -D wext -B -i \u003c设备名\u003e -c \u003c(wpa_passphrase \u003cwifi 名称\u003e \u003cwifi 密码\u003e) 根据实际情况替换括号内的内容，例如：# wpa_supplicant -D wext -B -i wlan0 -c \u003c(wpa_passphrase TP-LINK_home Kc0ver) -D wext 的意义是使用 wext 驱动网卡，-B 是后台运行，-i 是指定设备，-c 是指定配置文件，而后面的内容是根据网络情况生成配置文件，这条长命令本质是两条段命令结合而成的，配置文件不会生成为文件而是直接使用。 iwctl --passphrase 密码 station 无线网卡名 connect 无线名称 station list device list device wlan0 show station wlan0 scan station wlan0 get-network station wlna0 connect ssid 校对时间 使用 timedatectl 修改时区：\ntimedatectl set-timezone Asia/Shanghai 随后使用 date 命令检查时间是否正确：\ndate 输出应该是这样的：\nSun Dec 25 20:45:32 CST 2022 时间正确即可进行下一步。\n分区 使用 fdisk 列出硬盘和分区情况：\nfdisk -l 之后使用以下命令进入图形化的分区修改界面：\ncfdisk \u003c硬盘编号\u003e 设置好分区后记住编号，再格式化：\n# 系统分区： mkfs.ext4 \u003c分区编号\u003e # EFI 分区（如果有）： mkfs.fat -F 32 \u003c分区编号\u003e # 交换分区（如果有）： mkswap \u003c分区编号\u003e # 启动交换分区（如果有）： swapon \u003c分区编号\u003e # 挂载即将安装系统的分区： mount \u003c分区编号\u003e /mnt 修改镜像源 Arch Linux 的优势在于可以自由安装系统的每个部分，甚至是内核，中国的用户在安装之前要先更换软件镜像源，使用以下命令编辑源列表：\nnano /etc/pacman.d/mirrorlist 在第一行加入：\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch\rServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch 刷新软件包列表：\npacman -Syy 安装 archlinux-keyring 包：\npacman -S archlinux-keyring 安装系统 这样就可以获得较快的下载速度，使用以下指令安装基本系统：\npacstrap /mnt base base-devel linux linux-firmware linux-headers 这样只是最基本的系统，还需要更多的软件来支持系统运行，以下是作者认为需要安装的\nnetworkmanager - 连接互联网（不用 netctl） dhcpcd - 分配 ip 地址 openssh - ssh服务 cups - 打印机 nano 或 micro - 都是好用的命令行文本编辑器，micro 的快捷键更接近 Windows 自带的记事本。 git - 100%会用到的，现在不装以后也会被当作依赖安装 grub - 必须安装，引导系统用 os-prober - 双系统必须安装 efibootmgr - UEFI 必须安装 intel-ucode 或 amd-ucode - CPU 微码必须安装 man-db 和 man-pages - 查看软件包的文档 ntfs-3g - 只读挂载 ntfs 分区（访问 Windows 文件）双系统必须安装 firefox - 浏览器 noto-fonts-cjk 和 noto-fonts-emoji - 谷歌设计的字体（包含中文和 emoji） 将需要安装的软件包添加在 pacstrap 命令中一并安装，如果有其他的软件包需要安装也可以在这里安装。\n设置新系统 挂载 EFI 分区（如果有）：\nmkdir /mnt/boot/efi mount \u003cEFI 分区编号\u003e /mnt/boot/efi 创建 fstab 文件：\ngenfstab -U /mnt \u003e\u003e /mnt/etc/fstab chroot 进入新系统：\narch-chroot /mnt chroot 相当于不重启进入位于挂载点 /mnt 的新系统中，可以在安装设置与急救系统方面发挥作用。chroot 后，做出的设置将会保留在新系统中。（可移植）\n正如其名 **arch-**chroot，这个命令可以自动处理一些 chroot 参数以达到易用的特性。\n如果使用 pacstrap 安装基本系统的步骤没有做好，chroot 时就会出现报错，一般是提示找不到 /bin/bash，但是有一些情况下正确配置也会出现这个问题，我无法复现出这个错误，因此请仔细检查要 chroot 的挂载点和 pacstrap 的安装位置。\n设置时区：\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 生成 /etc/adjtime：\nhwclock --systohc 编辑 locale.gen 和 locale.conf：\nnano /etc/locale.gen locale.gen 和 locale.conf 有关系统的语言，是本地化的步骤。\n运行 locale-gen：\nlocale-gen 编辑 /etc/locale.conf： 编辑主机名：\nnano /etc/hostname 设置 root 密码：\npasswd root 安装 grub 引导： 如果是双系统，需要启用 os-prober 发现其他操作系统（比如 Windows）。\n编辑 grub 配置文件：\nnano /etc/default/grub 接下来便可以安装 grub 到硬盘，\n# 传统引导： grub-install --target=i386-pc \u003c硬盘号\u003e grub-mkconfig -o /boot/grub/grub.cfg # UEFI 引导： grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB grub-mkconfig -o /boot/grub/grub.cfg Arch 安装后Grub无法引导的解决方法 首先，仅对UEFI有效\n这个问题常出现在全新安装中，比如虚拟机\n问题原因在于需要开启boot分区的“bootable flag”\n开启方法：\n挂载boot分区\rmount /dev/sda1 /boot\r使用“parted”工具，“set 1 boot on”'\rparted\rset 1 boot on\r重新执行“grub-install”与“grub-mkconfig”：\rgrub-install --target=x86-64-efi --efi-directory /boot --bootloader-id=GRUB\rgrub-mkconfig -o /boot/grub/grub.cfg\r服务自启动：\n# 打印机（如果需要）： systemctl enable cups # ssh 服务： systemctl enable sshd # 网络服务： systemctl enable NetworkManager dhcpcd 创建普通用户：\nuseradd -m \u003c用户名\u003e -G wheel # 用户组设置为 wheel 是因为 wheel 在 /etc/passwd中包含，如果你有能力可以设置为其他的组或者自建组。 编辑 sudoers 文件赋予用户管理员权限：\nnano /etc/sudoers 改密码：\npasswd \u003c用户名\u003e 输入法fcitx5 https://wiki.archlinux.org/title/Fcitx5\n软件安装 linuxqq\rwechat\rwemeet\robs\rtypora\rvscode\rfinalshell\rzotero 外观缩放设置 全局缩放\n字体固定dpi\n字体大小\n单个程序单独缩放\n具体见官方wiki https://wiki.archlinux.org/title/HiDPI\n常用命令 pacman pacman -S\rpacman -Sy 更新库\rpacman -Syy 强制更新库\rpacman -Syu 更新包\rpacman -R\rpacman -Rs 删除该包及不被需要的依赖（安全）\rpacman -Rsu 删除该包及其依赖\rpacman -Rsc 删除该包及依赖该包的所有包\rpacman -Rdd 删除该包，不删除依赖该包的所有包\rpacman -Sc 删除非安装包的缓存\rpacman -Scc 删除所有包的缓存\rpacman -Ss 关键字: 在仓库中搜索含关键字的软件包（本地已安装的会标记）\rpacman -Qs 关键字: 搜索已安装的软件包\rpacman -Qu: 列出所有可升级的软件包\rpacman -Qt: 列出不被任何软件要求的软件包 paru paru集成pacman中的功能，可以只用paru 查找core,commity,extra,archlinuxcn,aur的包\nparu \u003ctarget\u003e 查找包 paru 别名 for paru -Syu paru -S \u003ctarget\u003e 安装指定包 paru -Sua -- 更新所有AUR包 paru -Qua -- 打印所有AUR包可用更新 paru -G \u003ctarget\u003e -- Download the PKGBUILD and related files of `\u003ctarget\u003e`. paru -Gp \u003ctarget\u003e -- Print the PKGBUILD of `\u003ctarget\u003e`. paru -Gc \u003ctarget\u003e -- Print the AUR comments of `\u003ctarget\u003e`. paru --gendb -- Generate the devel database for tracking `*-git` packages. This is only needed when you initially start using paru. paru -Ui -- Build and install a PKGBUILD in the current directory. arch快速安装总结 # live引导时 加入\ri915.enable_psr=0 i8042.dumbkbd\r# 进live\riwctl --passphrase 密码 station 无线网卡名 connect 无线名称\rtimedatectl set-timezone Asia/Shanghai\r# 分区\rfdisk -l\rcfdisk \u003c硬盘编号\u003e\rmkfs.ext4 \u003c分区编号\u003e\rmkfs.fat -F 32 \u003c分区编号\u003e\rmkswap \u003c分区编号\u003e\rswapon \u003c分区编号\u003e\rmount \u003c分区编号\u003e /mnt\r# 安装系统\rnano /etc/pacman.d/mirrorlist\r# 这里用http快\rServer = http://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch\rpacstrap /mnt base base-devel linux linux-firmware linux-headers networkmanager nano grub os-prober efibootmgr intel-ucode ntfs-3g firefox noto-fonts-cjk noto-fonts-emoji\rmkdir /mnt/boot/efi\rmount \u003cEFI 分区编号\u003e /mnt/boot/efi\rgenfstab -U /mnt \u003e\u003e /mnt/etc/fstab\rarch-chroot /mnt\rln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\rhwclock --systohc\rnano /etc/locale.gen\rlocale-gen\rpasswd root\r# 这里添加i915.enable_psr=0 i8042.dumbkbd 和开启os-prober\rnano /etc/default/grub\r# 临时挂载windows efi盘到/boot/efi/EFI/win开启grub双系统引导\rgrub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB\rgrub-mkconfig -o /boot/grub/grub.cfg\rsystemctl enable NetworkManager\ruseradd -m \u003c用户名\u003e -G wheel\rnano /etc/sudoers\rpasswd \u003c用户名\u003e\r# 安装桌面 使用kde wayland\rsudo pacman -S passwd plasma-meta plasma-wayland-session konsole dolphin blues-utils sof-firmware sudo systemctl enable bluetooth\r# fcitx5\rsudo pacman -S fcitx5-im fcitx5-chinese-addons\r/etc/envirment\rGTK_IM_MODULE=fcitx\rQT_IM_MODULE=fcitx\rXMODIFIERS=@im=fcitx\rSDL_IM_MODULE=fcitx\rGLFW_IM_MODULE=ibus\rsudo mkdir /mnt/win\r# /etc/fstab 自动挂载win10\r/dev/nvme0n1p3 /mnt/win ntfs defaults 0 0\r# oh my zsh\rsudo pacman -S zsh\rsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\rchsh -s /bin/zsh\rkonsole中改设置\rgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\rgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\rplugins=(git zsh-syntax-highlighting zsh-autosuggestions)\rConsolas, 'Courier New', monospace ","grub设置#GRUB设置":"","live#live":"","常用命令#常用命令":"","设置新系统#设置新系统":""},"title":"Archlinux安装"},"/docs/linux/hyprland/":{"data":{"":"","dm#dm":"","fully-configure#Fully configure":"","intel驱动#intel驱动":"","亮度#亮度":"","其他#其他":"基于archlinux\n先安装archlinux，任意桌面环境即可，没有也行\n安装hyprland # 两个版本，都行 AUR包 hyprland-git - compiles from latest source hyprland - compiles from latest release source 安装终端 kitty 启动hyprland Now, you can just execute Hyprland in your tty.\n!IMPORTANT: Do not launch Hyprland with root permissions (don’t sudo)\n在大多数 发行版 中，你可以使用以下键盘快捷键来得到 TTY 屏幕：\nCTRL + ALT + F1 – 锁屏 CTRL + ALT + F2 – 桌面环境 CTRL + ALT + F3 – TTY3 CTRL + ALT + F4 – TTY4 CTRL + ALT + F5 – TTY5 CTRL + ALT + F6 – TTY6 也可以使用login manager\nSDDM, GDM ly\n默认配置 super+q 打开kitty\n配置文件路径~/.config/hypr/hyprland.conf\n现在只是有了一个环境，里面啥也没有需要自己安装\n报错：permission failed seatd 重启解决\n必装软件 通知守护进程 dunst, mako Pipewire 屏幕共享需要，可不装\nInstall pipewire and wireplumber\nXDG Desktop Portal 不知道是啥，装吧\nStarting method: Automatic on Systemd, manual otherwise\nXDG Desktop Portal handles a lot of stuff for your desktop, like file pickers, screensharing, etc.\nyay -S xdg-desktop-portal-hyprland-git Authentication Agent 要权限的\nStarting method: manual (exec-once)\nAuthentication agents are the things that pop up a window asking you for a password whenever an app wants to elevate its privileges.\nOur recommendation is the KDE one. For arch, it’s polkit-kde-agent.\nYou can autostart it with exec-once=/usr/lib/polkit-kde-authentication-agent-1.\nOn other distributions that use a more recent version, such as Gentoo, it may be necessary to use exec-once=/usr/lib64/libexec/polkit-kde-authentication-agent-1 instead.\nQT Wayland Support 装就行了\nStarting method: none (just a library)\nInstall qt5-wayland and qt6-wayland\n显示器配置 monitor=name,resolution,position,scale monitor=DP-1,1920x1080@144,0x0,1 To list available monitors:\nhyprctl monitors For example:\nmonitor=DP-1, 2560x1440@120,0x0, 1 monitor=eDP-1, 2880x1800@90, 2560x200, 2 To disable a monitor, use\nmonitor=name,disable Default workspace workspace = DP-1, 1 workspace = DP-2, name:work 需装软件 status bars 上面的状态栏\nwaybar App Launchers 没这个就得命令行启动了\nWofi Rofi bemenu fuzzel Wallpapers 壁纸，总得有个吧\nhyprpaper Clipboard Managers 剪切板，这个还是挺重要的\nSome common ones used are copyq, clipman and cliphist.\nclipman - Utilizes Wayland with wl-clipboard support and stores text only Github\ncliphist - Utilizes Wayland with wl-clipboard and can store both images and text Github\n那肯定选下面的\n配置 ~/.config/hypr/hyprland.conf\nexec-once = wl-paste --type text --watch cliphist store #Stores only text data\rexec-once = wl-paste --type image --watch cliphist store #Stores only image data 下面没看懂\nTo bind cliphist to a hotkey and display it under rofi or dmenu, again head over to ~/.config/hypr/hyprland.conf\nFor rofi users\nbind = SUPER, V, exec, cliphist list | rofi -dmenu | cliphist decode | wl-copy For dmenu users\nbind = SUPER, V, exec, cliphist list | dmenu | cliphist decode | wl-copy The binds mention above correspond to SUPER+V to access the clipboard history\nFor further info, please refer to the repository mentioned above\nFully configure 这个自己看文档\nExample Configurations https://wiki.hyprland.org/Configuring/Example-configurations/\n各种软件代替 https://github.com/hyprland-community/awesome-hyprland#runners-menus-and-application-launchers\ndm sddm\nintel驱动 mesa vulkan-intel intel-media-driver\n输入法 fcitx5-im\nfcitx5-chinese-addons\n环境变量 /etc/environment\nGTK_IM_MODULE=fcitx\rQT_IM_MODULE=fcitx\rXMODIFIERS=@im=fcitx\rSDL_IM_MODULE=fcitx\rGLFW_IM_MODULE=ibus 词库：fcitx5-pinyin-zhwiki\n蓝牙 https://wiki.archlinuxcn.org/wiki/%E8%93%9D%E7%89%99\n亮度 安装light包并将你使用的用户添加到video用户组。\n声音 pipewire\n一些较新型号的笔记本电脑（2019年底/2020）需要sof-firmware包 和 alsa-ucm-conf包，它们使用 Sound Open Firmware 提供的固件实现驱动程序。\nhttps://wiki.archlinuxcn.org/wiki/ALSA\n重启重启\n电源 nwg-bar\n锁屏：swaylock\n常用软件 img：imv\n视频：vlc\n流程图：drawio\n锁屏：gtklock配合swayidle\nranger\nwlr-randr\nxorg-eyes\noh-my-zsh\n截屏：\n双系统grub设置 安装os-prober，取消掉/etc/default/grub文件关于os-prober的注释\nGRUB_DISABLE_OS_PROBER=false\n把window efi盘挂载到 /boot/efi/EFI/win\n这里archwiki上是说挂哪都可以，我一开始挂到/mnt下不行，其他地方未知\n然后grub-mkconfig -o /boot/grub/grub.cfg\n就可以找到了 asd\n总结 yay -S hyprland #安装hyprland\rmako #通知守护\rpipewire #屏幕共享\ryay -S xdg-desktop-portal-hyprland-git\t#不知道\rpolkit-kde-agent\t#申请权限\rqt5-wayland qt6-wayland\t#qt支持\rwaybar\twaybar-hyprland-git\t#bar\rwofi\t#app launchers\rhyprpapers\t#壁纸\rcliphist\t#剪贴板\rparu -S hyprland\r# 加入archlinuxcn源后\rsudo paru -S mako pipewire polkit-kde-agent qt5-wayland qt6-wayland\rparu xdg-desktop-portal-hyprland-git waybar-hyprland-git rofi-lbonn-wayland-git hyprpaper cliphist nemo kitty\r# 其他软件\rsudo pacman -S firefox visual-studio-code-bin # 装完之后只是有了桌面，没有其他功能\r# 复制 hyprland.conf waybar的config css\r# waybar中使用了其他软件需要安装\r字体：ttf-jetbrains-mono-nerd\r蓝牙：bluez bluez-utils\r声音：sof-firmware 和 alsa-ucm-conf\r笔记本背光：light\r关机：nwg-bar 锁屏 swaylock\rsudo systemctl enable bluetooth.service\r# 列出显示器\rhyprctl monitors\r# 配置文件\rmonitor=DP-1, 2560x1440@120,0x0, 1\rmonitor=eDP-1, 2880x1800@90, 2560x200, 2 新总结 # 加入archlinuxcn源后\rsudo nano /etc/pacman.conf\r[archlinuxcn]\rServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\rsudo pacman -Syy\r# 必装\rsudo pacman -S hyprland kitty mako pipewire xdg-desktop-portal-hyprland polkit-kde-agent qt5-wayland qt6-wayland\r# 重要软件\rsudo pacman -S wofi cliphist firefox swayidle\rparu visual-studio-code-bin\r# 下面是waybar需要\r# 注意不要装archlinuxcn的\rparu waybar-hyprland\rsudo pacman -S ttf-jetbrains-mono-nerd bluez bluez-utils sof-firmware alsa-ucm-conf pamixer pavucontrol light nwg-bar swaylock-effect\r# 将用户加入video组\rsudo usermod -a -G video [username]\r# 输入法\rsudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-zhwiki\r环境变量中\rGTK_IM_MODULE=fcitx\rQT_IM_MODULE=fcitx\rXMODIFIERS=@im=fcitx\rSDL_IM_MODULE=fcitx\rGLFW_IM_MODULE=ibus\rconfigure中设置\r# electron中无法输入\r.config/electron-flags.conf\r--enable-features=UseOzonePlatform\r--ozone-platform=wayland\r--enable-wayland-ime\r# xe显卡帧数不稳\rsudo pacman -S tlp\rsudo nano /etc/tlp.conf\rINTEL_GPU_MIN_FREQ_ON_AC=400\rINTEL_GPU_MIN_FREQ_ON_BAT=400\rINTEL_GPU_MAX_FREQ_ON_AC=1300\rINTEL_GPU_MAX_FREQ_ON_BAT=1300\rINTEL_GPU_BOOST_FREQ_ON_AC=1300\rINTEL_GPU_BOOST_FREQ_ON_BAT=1300\rsudo systemctl enable tlp.service\rsudo systemctl start tlp.service\r# sudo不能补全\recho \"complete -cf sudo\" \u003e\u003e ~/.bashrc \u0026\u0026 source ~/.bashrc\r# wifi nmtui\r# bluetooth s扫描 c连接\rparu bluetuith\r# 所有配置文件\r.config\r- hypr\r- hyprland.conf\r- waybar\r- config\r- style.css\r- nwg-bar\r- bar.json\r- style.css\r- wofi\r- config\r- style.css\r- swayidle\r- config\t- electron-flags.confs 其他 oh-my-zsh sudo pacman -S zsh\rchsh -s /bin/zsh\rsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\r# 插件\rgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\rgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\r# 然后在.zshrc中设置\r# kitty文字大小\r.config/kitty/kitty.conf\rfont_size 16 sddm sugar-candy主题\n创建配置文件目录\n复制default配置到新目录\n主题改为sugar-candy\nswaylock swaylock换swaylock-effect","双系统grub设置#双系统grub设置":"","各种软件代替#各种软件代替":"","启动hyprland#启动hyprland":"","声音#声音":"","安装hyprland#安装hyprland":"","安装终端#安装终端":"","常用软件#常用软件":"","必装软件#必装软件":"","总结#总结":"","新总结#新总结":"","显示器配置#显示器配置":"","电源#电源":"","蓝牙#蓝牙":"","输入法#输入法":"","需装软件#需装软件":""},"title":"Hyprland安装"},"/docs/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/":{"data":{"":"","apt与apt-get#apt与apt-get":"最常用的 Linux 包管理命令都被分散在了 apt-get、apt-cache 和 apt-config 这三条命令当中。\napt 命令的引入就是为了解决命令过于分散的问题，它包括了 apt-get 命令出现以来使用最广泛的功能选项，以及 apt-cache 和 apt-config 命令中很少用到的功能。\n在使用 apt 命令时，用户不必再由 apt-get 转到 apt-cache 或 apt-config，而且 apt 更加结构化，并为用户提供了管理软件包所需的必要选项。\n简单来说就是：apt = apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。\napt 命令 取代的命令 命令的功能 apt install apt-get install 安装软件包 apt remove apt-get remove 移除软件包 apt purge apt-get purge 移除软件包及配置文件 apt update apt-get update 刷新存储库索引 apt upgrade apt-get upgrade 升级所有可升级的软件包 apt autoremove apt-get autoremove 自动删除不需要的包 apt full-upgrade apt-get dist-upgrade 在升级软件包时自动处理依赖关系 apt search apt-cache search 搜索应用程序 apt show apt-cache show 显示装细节 # 修复依赖关系 sudo apt --fix-broken install ","dpkg#dpkg":"dpkg 即 package manager for Debian ，是 Debian 和基于 Debian 的系统中一个主要的包管理工具，可以用来安装、构建、卸载、管理 deb格式的软件包。\ndpkg 主要是用来安装已经下载到本地的 deb 软件包，或者对已经安装好的软件进行管理。而 apt-get 可以直接从远程的软件仓库里下载安装软件。\n参数 说明 -i | -R 安装 文件 目录 -r 卸载 -l 列出安装包信息 ","service-和-systemctl#service 和 systemctl":"历史上，Linux 的启动一直采用init进程。下面的命令用来启动服务。\nsudo /etc/init.d /apache2 start # 或者 service apache2 start 一是启动时间长。init 进程是串行启动，只有前一个进程启动完，才会启动下一个进程。 二是启动脚本复杂。init 进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长 service命令（不推荐） service命令其实是去/etc/init.d目录下，去执行相关脚本\n# service命令启动redis脚本 service redis start # 直接启动redis脚本 /etc/init.d/redis start # 开机自启动 update-rc.d redis defaults 其中脚本需要我们自己编写\nsystemctl命令 systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动。 systemd对应的进程管理命令是systemctl\nsystemctl命令兼容了service\n即systemctl也会去/etc/init.d目录下，查看，执行相关程序\n# 注意顺序 sudo systemctl redis start sudo systemctl redis stop # 开机自启动 sudo systemctl enable redis systemctl命令管理systemd的资源Unit（推荐）\nsudo systemctl status #显示系统状态 sudo systemctl start [单元] #立即激活单元： sudo systemctl stop [单元] #立即停止单元 sudo systemctl restart [单元] #重启单元 sudo systemctl enable [单元] #开机自动激活单元 sudo systemctl disable [单元] #取消开机自动激活单元 sudo systemctl daemon-reload #重新载入systemd，扫描新的或有变动的单元 systemd的Unit放在目录/usr/lib/systemd/system(Centos)或/etc/systemd/system(Ubuntu)\n主要有四种类型文件.mount,.service,.target,.wants\n.mount\n.mount文件定义了一个挂载点，[Mount]节点里配置了What,Where,Type三个数据项 等同于以下命令：\nmount -t What Where Type .service\n.service文件定义了一个服务，分为[Unit]，[Service]，[Install]三个小节 [Unit] Description:描述， After：在network.target,auditd.service启动后才启动 ConditionPathExists: 执行条件\n[Service] EnvironmentFile:变量所在文件 ExecStart: 执行启动脚本 Restart: fail时重启\n[Install] Alias:服务别名 WangtedBy: 多用户模式下需要的\n.target\n.target定义了一些基础的组件，供.service文件调用\n.wants文件夹\n.wants文件定义了要执行的文件集合，每次执行，.wants文件夹里面的文件都会执行","交换区#交换区":"内存不够用时可适当增加交换区大小\n查看交换区大小 free -h 创建swap文件 swap交换空间其实就是硬盘上一个特定的文件，只不过这个文件只有内存在读写，只不过这个文件比较大些。\n# 随便找个地方 创建swapfile文件 路径和名字都随便 # bs是没块的大小 count是数量 相乘是swap大小 sudo dd if=/dev/zero of=./swapfile bs=1G count=32 转换swap文件 sudo mkswap -f swapfile 激活swap文件 sudo swapon swap 卸载swap文件 sudo swapoff swap 开机挂载swap 如果想要一直使用改后的swap还需开机挂载，打开fstab\nsudo nano /etc/fstab # 找一行添加 按照上面的格式提示来","域名#域名":"查看域名 cat /etc/resolv.conf\nnameserver 127.0.0.1:53\nresolv.conf -\u003e ../run/systemd/resolve/stub-resolv.conf","打包和压缩#打包和压缩":"tar 选项 含义 -c 将多个文件或目录进行打包。 -A 追加 tar 文件到归档文件。 -f 包名 指定包的文件名。包的扩展名是用来给管理员识别格式的，所以一定要正确指定扩展名； -v 显示打包文件过程； -x 对 tar 包做解打包操作。 -f 指定要解压的 tar 包的包名。 -t 只查看 tar 包中有哪些文件或目录，不对 tar 包做解打包操作。 -C 目录 指定解打包位置。 # 打包单文件或目录 tar -cvf A.tar A # 打包多文件或目录 tar -cvf E.tar A B C D #查看包中文件 tar -tf A.tar # 解包到当前目录 tar -xvf A.tar # 解包到指定目录 tar -xvf A.tar -C /tmp gzip 压缩命令不能直接压缩目录，必须先用 tar 命令将目录打包，然后才能用 gzip 命令或 bzip2 命令对打包文件进行压缩\ngzip test.tar 同时打包和压缩 -z：压缩和解压缩 “.tar.gz” 格式； -j：压缩和解压缩 “.tar.bz2\"格式。 tar -zcvf A.tar.gz A tar -jcvf A.tar.bz2 A tar -zxvf A.tar.gz tar -jxvf A.tar.bz2 ","查看硬件信息#查看硬件信息":"cpu cat /proc/cpuinfo 显卡 lspci | grep -i vga lshw -c video 网卡 lspci | grep -i eth 内存 dmidecode | grep -A16 'Memory Device' 硬盘 sudo fdisk -l sudo df -l ","用户用户组操作#用户/用户组操作":"创建用户 useradd username -m (-m 相当于会创建对应的用户家目录) # 指定家目录 useradd username -d /home/user usermod -s /bin/bash username (指定shell，否则会非常不便于终端操作) # 综合命令 useradd username -m -s /bin/bash useradd username -d /home/user -s /bin/bash 删除用户 userdel username。 # 若想将它在系统上的文件也删除掉 userdel -r username 修改密码 passwd username 用户加入组 # 额外添加组 sudo usermod -a -G group user # g为覆盖 只加入该组 sudo usermod -g group user 详情查看 usermod -h\n用户删除组 sudo gpasswd -d user group 改变文件夹权限 chmod user:group dir 查看所有用户/用户组 # 文件包含所有组 cat /etc/group # 系统存在的所有用户名 cat /etc/shadow cat /etc/passwd rand 添加权限 # 切换到root用户 su # 编辑配置文件 vim /etc/sudoers # 增加配置, 在打开的配置文件中，找到root ALL=(ALL) ALL, 在下面添加一行 # 其中xxx是你要加入的用户名称 xxx ALL=(ALL) ALL ","端口#端口":"查看端口占用 sudo netstat -anp | grep 端口号 # 查看所有被占用端口情况 sudo netstat -nultp 注：不加sudo会看不到占用软件 开放端口 apt install firewalld # 如果已安装则忽略这个命令 firewall-cmd --add-port=80/tcp --permanent # 开启80端口 ","系统代理#系统代理":"vim ~/.bashrc # 最后一行加上 export HTTP_PROXY=\"http://127.0.0.1:7890\" export HTTPS_PROXY=\"https://127.0.0.1:7890\" # 更新 source ~/.bashrc # apt临时代理，直接改.bashrc只能作用改用户，加sudo后变为root无效 # 或者切root后命令行临时加export HTTP_PROXY=\"http://172.18.144.56:7890\" sudo apt -o Acquire::http::proxy=\"http://172.18.144.59:7890\" install xxx ","网络配置#网络配置":"查看网卡配置 sudo apt install net-tools ifconfig 查看路由表 route -n 网络管理工具 Netplan 配置文件路径\nsudo nano /etc/netplan/xxx.yaml 默认设置 使用NetworkManager管理\nnetwork: version: 2 renderer: NetworkManager 使用Systemd-networkd管理，需配置，例\nnetwork: ethernets: enp0s3: addresses: [] dhcp4: true optional: true enp0s8: addresses: [192.168.56.3/24] dhcp4: no optional: true version: 2 网卡名字获取：\nifconfig cat /proc/net/dev # 以 /etc/netplan 配置为管理工具生成配置 netplan generate # 应用尝试，失败会自动改为原设置； netplan try # 应用配置(以便生效)，必要时重启管理工具 netplan apply ","进程控制#进程控制":" 命令 说明 ctrl+z 将任务中断,但是此任务并没有结束,他仍然在进程中，只是放到后台并维持挂起的状态。如需其在后台继续运行，需用“bg 进程号”使其继续运行；再用\"fg 进程号\"可将后台进程前台化。 ctrl+c 强行中断当前程序的执行 jobs 查看当前有多少在后台运行的命令 fg 将后台中的命令调至前台继续运行 bg 将一个在后台暂停的命令，变成继续执行 （在后台执行），如果后台中有多个命令，可以用 bg %jobnumber 将选中的命令调出 ctrl+\\ 发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件。 ctrl+d 表示结束当前输入（即用户不再给当前程序发出指令），那么 Linux 通常将结束当前程序 查看进程 ps -aux | grep xxx a：显示当前终端下的所有进程信息，包括其他用户的进程。\nu：使用以用户为主的格式输出进程信息。\nx：显示当前用户在所有终端下的进程。\nps -elf -e：显示系统内的所有进程信息。\n-l：使用长（long）格式显示进程信息。\n-f：使用完整的（full）格式显示进程信息。\ntop 以全屏交互式的界面显示进程排名，及时跟踪包括CPU、内存等系统资源占用情况，默认情况下每三秒刷新一次，其作用基本类似于Windows系统中的任务管理器。\npstree -aup -a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示\n-c：不使用精简标示法\n-G：使用VT100终端机的列绘图字符\n-h：列出树状图时，特别标明现在执行的程序\n-H ：\u003c程序识别码\u003e：此参数的效果和指定\n-h：参数类似，但特别标明指定的程序\n-l：采用长列格式显示树状图\n-n：用程序识别码排序。预设是以程序名称来排序\n-p：显示程序识别码\n-u：显示用户名称","防火墙firewalld#防火墙firewalld":"iptables 不推荐\n安装 yum install firewalld firewall-config sudo apt-get install firewalld 开放端口 sudo firewall-cmd --add-port=8001/tcp --permanent sudo firewall-cmd --reload 查看开放端口 sudo firewall-cmd --list-all 关闭端口 sudo firewall-cmd --remove-port=8001/tcp --permanent sudo firewall-cmd --reload "},"title":"Linux常用命令"},"/docs/linux/linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/":{"data":{"":"","docker#docker":"基础操作 docker pull：从 Docker Hub 或其他容器仓库下载一个镜像到本地。例如：docker pull nginx 将下载官方的 Nginx 镜像。 docker build：使用 Dockerfile 构建一个自定义镜像。例如：docker build -t myapp:1.0 . 将在当前目录中的 Dockerfile 构建一个名为 myapp 的镜像，版本号为 1.0。 docker run：创建并运行一个容器。例如：docker run -d -p 8080:80 nginx 将以后台方式运行一个 Nginx 容器，并将它的 80 端口映射到主机的 8080 端口。 docker ps：列出正在运行的容器。docker ps 列出正在运行的容器，而 docker ps -a 将列出所有容器，包括已停止的。 docker stop：停止一个运行中的容器。例如：docker stop container_name_or_id 可以用来停止指定容器。 docker start：启动一个已停止的容器。docker start container_name_or_id 可以用来启动一个已经存在但处于停止状态的容器。 docker restart：重新启动一个容器。例如：docker restart container_name_or_id 可以用来重启一个运行中或停止的容器。 docker exec：在运行中的容器中执行命令。例如：docker exec -it container_name_or_id bash 可以用来进入一个运行中的容器并执行一个交互式的 Bash Shell。 docker rm：删除一个停止的容器。例如：docker rm container_name_or_id 可以用来删除不再需要的容器。 docker rmi：删除一个镜像。例如：docker rmi image_name_or_id 可以用来删除不再需要的镜像。 docker images：列出本地所有的镜像。 docker network：管理 Docker 网络。可以使用诸如 docker network create、docker network connect 和 docker network disconnect 等命令来创建和管理容器之间的网络连接。 docker安装 https://www.bilibili.com/read/cv6547551/\n去官网https://docs.docker.com/desktop/install/ubuntu/\n可视化管理 安装portainer\nhttps://github.com/portainer/portainer\nhttps://docs.portainer.io/start/install-ce/server/docker/linux\noverleaf https://github.com/snwnde/sharelatex-with-texlive-full\nversion: 'latest' services: sharelatex: restart: always # Server Pro users: # image: quay.io/sharelatex/sharelatex-pro image: sharelatex/sharelatex:with-texlive-full container_name: sharelatex depends_on: mongo: condition: service_healthy redis: condition: service_started ports: - 80:80 links: - mongo - redis volumes: - ~/sharelatex_data:/var/lib/sharelatex ######################################################################## #### Server Pro: Uncomment the following line to mount the docker #### #### socket, required for Sibling Containers to work #### ######################################################################## # - /var/run/docker.sock:/var/run/docker.sock environment: SHARELATEX_APP_NAME: Overleaf Community Edition SHARELATEX_MONGO_URL: mongodb://mongo/sharelatex # Same property, unfortunately with different names in # different locations SHARELATEX_REDIS_HOST: redis REDIS_HOST: redis ENABLED_LINKED_FILE_TYPES: 'url,project_file' # Enables Thumbnail generation using ImageMagick ENABLE_CONVERSIONS: 'true' # Disables email confirmation requirement EMAIL_CONFIRMATION_DISABLED: 'true' # temporary fix for LuaLaTex compiles # see https://github.com/overleaf/overleaf/issues/695 TEXMFVAR: /var/lib/sharelatex/tmp/texmf-var ## Set for SSL via nginx-proxy #VIRTUAL_HOST: 103.112.212.22 # SHARELATEX_SITE_URL: http://sharelatex.mydomain.com # SHARELATEX_NAV_TITLE: Our ShareLaTeX Instance # SHARELATEX_HEADER_IMAGE_URL: http://somewhere.com/mylogo.png # SHARELATEX_ADMIN_EMAIL: support@it.com # SHARELATEX_LEFT_FOOTER: '[{\"text\": \"Powered by \u003ca href=\\\"https://www.sharelatex.com\\\"\u003eShareLaTeX\u003c/a\u003e 2016\"},{\"text\": \"Another page I want to link to can be found \u003ca href=\\\"here\\\"\u003ehere\u003c/a\u003e\"} ]' # SHARELATEX_RIGHT_FOOTER: '[{\"text\": \"Hello I am on the Right\"} ]' # SHARELATEX_EMAIL_FROM_ADDRESS: \"team@sharelatex.com\" # SHARELATEX_EMAIL_AWS_SES_ACCESS_KEY_ID: # SHARELATEX_EMAIL_AWS_SES_SECRET_KEY: # SHARELATEX_EMAIL_SMTP_HOST: smtp.mydomain.com # SHARELATEX_EMAIL_SMTP_PORT: 587 # SHARELATEX_EMAIL_SMTP_SECURE: false # SHARELATEX_EMAIL_SMTP_USER: # SHARELATEX_EMAIL_SMTP_PASS: # SHARELATEX_EMAIL_SMTP_TLS_REJECT_UNAUTH: true # SHARELATEX_EMAIL_SMTP_IGNORE_TLS: false # SHARELATEX_EMAIL_SMTP_NAME: '127.0.0.1' # SHARELATEX_EMAIL_SMTP_LOGGER: true # SHARELATEX_CUSTOM_EMAIL_FOOTER: \"This system is run by department x\" ################ ## Server Pro ## ################ # SANDBOXED_COMPILES: 'true' # SANDBOXED_COMPILES_SIBLING_CONTAINERS: 'true' # SANDBOXED_COMPILES_HOST_DIR: '/var/sharelatex_data/data/compiles' # SYNCTEX_BIN_HOST_PATH: '/var/sharelatex_data/bin/synctex' # DOCKER_RUNNER: 'false' ## Works with test LDAP server shown at bottom of docker compose # SHARELATEX_LDAP_URL: 'ldap://ldap:389' # SHARELATEX_LDAP_SEARCH_BASE: 'ou=people,dc=planetexpress,dc=com' # SHARELATEX_LDAP_SEARCH_FILTER: '(uid={{username}})' # SHARELATEX_LDAP_BIND_DN: 'cn=admin,dc=planetexpress,dc=com' # SHARELATEX_LDAP_BIND_CREDENTIALS: 'GoodNewsEveryone' # SHARELATEX_LDAP_EMAIL_ATT: 'mail' # SHARELATEX_LDAP_NAME_ATT: 'cn' # SHARELATEX_LDAP_LAST_NAME_ATT: 'sn' # SHARELATEX_LDAP_UPDATE_USER_DETAILS_ON_LOGIN: 'true' # SHARELATEX_TEMPLATES_USER_ID: \"578773160210479700917ee5\" # SHARELATEX_NEW_PROJECT_TEMPLATE_LINKS: '[ {\"name\":\"All Templates\",\"url\":\"/templates/all\"}]' # SHARELATEX_PROXY_LEARN: \"true\" mongo: restart: always image: mongo:4.0 container_name: mongo expose: - 27017 volumes: - ~/mongo_data:/data/db healthcheck: test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet interval: 10s timeout: 10s retries: 5 redis: restart: always image: redis:5 container_name: redis expose: - 6379 volumes: - ~/redis_data:/data # ldap: # restart: always # image: rroemhild/test-openldap # container_name: ldap # expose: # - 389 # See https://github.com/jwilder/nginx-proxy for documentation on how to configure the nginx-proxy container, # and https://github.com/overleaf/overleaf/wiki/HTTPS-reverse-proxy-using-Nginx for an example of some recommended # settings. We recommend using a properly managed nginx instance outside of the Overleaf Server Pro setup, # but the example here can be used if you'd prefer to run everything with docker-compose # nginx-proxy: # image: jwilder/nginx-proxy # container_name: nginx-proxy # ports: # #- \"80:80\" # - \"443:443\" # volumes: # - /var/run/docker.sock:/tmp/docker.sock:ro # - /home/sharelatex/tmp:/etc/nginx/certs ","mysql#mysql":"mysql 安装方式\n源码编译 压缩包解压（一般为tar.gz） 编译好的安装包（RPM、DPKG等） 在线安装（YUM、APT等） 在线安装 打开网址：MySQL 存储库\n找到对应linux的版本进行下载\nwget https://dev.mysql.com/get/mysql-apt-config_0.8.23-1_all.deb 安装mysql-apt-config\nsudo dpkg -i mysql-apt-config_0.8.23-1_all.deb 选择你需要的配置（GUI）\n在线安装\nsudo apt install mysql-server 设置账户密码\nsudo mysql ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'mynewpassword'; 注：@后是允许登录ip 任意用% localhost指只允许本地登录 IDENTIFIED WITH mysql_native_password 指密码加密方式 卸载 sudo apt purge mysql-server sudo apt --purge autoremove sudo apt purge mysql-apt-config 压缩包安装 官方安装教程：https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html\n# 创建mysql组 groupadd mysql # 创建mysql用户 useradd -r -g mysql -s /bin/false mysql # 解压 cd /usr/local tar zxvf */path/to/mysql-VERSION-OS*.tar.gz # 创建软链接便于操作（可选） ln -s *full-path-to-mysql-VERSION-OS* mysql cd mysql mkdir mysql-files chown mysql:mysql mysql-files chmod 750 mysql-files bin/mysqld --initialize --user=mysql bin/mysql_ssl_rsa_setup bin/mysqld_safe --user=mysql # Next command is optional cp support-files/mysql.server /etc/init.d/mysql.server 安装后没有root密码 sudo cat /etc/mysql/debian.cnf 开启远程登录 改监听端口，user开启远程权限。\nsudo nano /etc/mysql/mysql.conf.d/mysqld.cnf #bind-adderss = 127.0.0.1 安全启动配置向导 建议生产环境中mysql安装这完成后一定要运行一次\nsudo mysql_secure_installation 为root用户设置密码\n删除匿名账号\n取消root用户远程登录\n删除test库和对test库的访问权限\n刷新授权表使修改生效\n常用命令 # 登录 mysql -u root -p # 显示数据库列表 show databases; # 创建数据库 create database 数据库名; # 删除 drop database 数据库名; # 进入数据库 use mysql; # 展示表 show tables; # 显示表结构 describe 数据表名; # 创建用户 CREATE USER ‘Kevin'@'localhost' IDENTIFIED BY ‘123456'; # 授权 GRANT\u003cprivileges\u003eON \u003cdatabase\u003e.\u003ctable\u003e TO 'Kevin'@'localhost'; # 修改密码 ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'password' update user set host = '%' where user = 'root'; FLUSH PRIVILEGES; ALL: 所有可用的权限\nCREATE: 创建库、表和索引\nLOCK_TABLES: 锁定表\nALTER: 修改表\nDELETE: 删除表\nINSERT: 插入表或列\nSELECT: 检索表或列的数据\nCREATE_VIEW: 创建视图\nSHOW_DATABASES: 列出数据库\nDROP: 删除库、表和视图\ndocker-compose # Use root/example as user/password credentials version: '3.1' services: db: image: mysql:8.0.34-debian container_name: mysql # NOTE: use of \"mysql_native_password\" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password # (this is just an example, not intended to be a production configuration) command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci restart: always ports: - 3306:3306 environment: MYSQL_ROOT_PASSWORD: password TZ: Asia/Shanghai adminer: image: adminer restart: always ports: - 8080:8080 mysql外部访问 sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 把bind-address参数的值改成你的内/外网IP或0.0.0.0\n注意防火墙","nginx#nginx":"安装依赖包 pcre openssl zlib redhat系 yum -y install gcc gcc-c++ kernel-devel yum install -y pcre pcre-devel yum install -y zlib zlib-devel yum install -y openssl openssl-devel # 一键 yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel debian系 # 安装pcre sudo apt install build-essential # 安装gcc编译器及其环境,包含gcc, gdb, make等 sudo apt install libpcre3 libpcre3-dev # 安装openssl sudo apt install openssl sudo apt install libssl-dev # 安装zlib sudo apt install zlib1g-dev\t注：第五个字符是1不是l 或下载编译安装 wget https://ftp.pcre.org/pub/pcre/pcre-8.37.tar.gz # 下载安装包 tar -zxvf pcre-8.37.tar.gz # 解压 cd pcre-8.37 ./configure # 等待执行完 make \u0026\u0026 make install # 编译安装 wget http://www.zlib.net/zlib-1.2.11.tar.gz # 下载压缩包 tar -zxvf zlib-1.2.11.tar.gz cd zlib-1.2.11 # 进入解压后的目录 ./configure # 等待执行完毕 make \u0026\u0026 make install # 编译安装 下载并解压 wget http://nginx.org/download/nginx-1.22.0.tar.gz # 解压 tar -zxvf nginx-1.22.0.tar.gz 安装 cd nginx-1.22.0 ./configure make sudo make install 启动 关闭 重启 sudo /usr/local/nginx/sbin/nginx sudo /usr/local/nginx/sbin/nginx -s stop sudo /usr/local/nginx/sbin/nginx -s reload # 指定配置文件启动 sudo /usr/local/nginx/sbin/nginx -s reload -c /usr/local/nginx/conf/nginx.conf 开机自启见： [systemctl 和 service 点击跳转](# service 和 systemctl)\n[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginx ExecReload=/usr/local/nginx/sbin/nginx -s reload ExecStop=/usr/local/nginx/sbin/nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target 配置文件 # 默认位置 sudo nano /usr/local/nginx/conf/nginx.conf **文件详解：**https://www.cnblogs.com/54chensongxia/p/12938929.html","screen#screen":"一个后台运行命令的软件\n特色功能：\n会话恢复：只要Screen本身没有终止，在其内部运行的会话都可以恢复。 多窗口：在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。 会话共享：Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出） 安装 # CentOS yum install screen # Debian/Ubuntu apt install screen 状态介绍 通常情况下，screen创建的虚拟终端，有两个工作模式：\nAttached：表示当前screen正在作为主终端使用，为活跃状态。 Detached：表示当前screen正在后台使用，为非激发状态。 查看终端列表 screen -ls 新建终端 # 直接screen进入(以Linux的hostname命名） screen # 创建一个叫Hello的虚拟终端 screen -S Hello # 使用-R创建Hello screen -R Hello 三种创建方法比较：\n使用-R创建，如果之前有创建唯一一个同名的screen，则直接进入之前创建的screen 使用-S创建和直接输入screen创建的虚拟终端，不会检录之前创建的screen（也就是会创建同名的screen) 回到主终端 在虚拟终端时想回到主终端\n我们按Ctrl+a，再按d，即可保持这个screen到后台并回到主终端\n回到虚拟终端 # 使用screen -r/R命令 screen -r [pid/name] 清除终端 # 需先进入要退出的虚拟终端 exit "},"title":"Linux常用软件"}}